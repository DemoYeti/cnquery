// Code generated by resources. DO NOT EDIT.
package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"gcp.project": {
			Init: initGcpProject,
			Create: createGcpProject,
		},
		"gcp.resourcemanager.binding": {
			// to override args, implement: initGcpResourcemanagerBinding(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpResourcemanagerBinding,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources[id]; ok {
				return x, nil
			}
			runtime.Resources[id] = res
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"gcp.project.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetId()).ToDataRes(types.String)
	},
	"gcp.project.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetName()).ToDataRes(types.String)
	},
	"gcp.project.parentId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetParentId()).ToDataRes(types.String)
	},
	"gcp.project.number": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetNumber()).ToDataRes(types.String)
	},
	"gcp.project.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetState()).ToDataRes(types.String)
	},
	"gcp.project.lifecycleState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetLifecycleState()).ToDataRes(types.String)
	},
	"gcp.project.createTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCreateTime()).ToDataRes(types.Time)
	},
	"gcp.project.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.iamPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetIamPolicy()).ToDataRes(types.Array(types.Resource("gcp.resourcemanager.binding")))
	},
	"gcp.resourcemanager.binding.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetId()).ToDataRes(types.String)
	},
	"gcp.resourcemanager.binding.members": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetMembers()).ToDataRes(types.Array(types.String))
	},
	"gcp.resourcemanager.binding.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetRole()).ToDataRes(types.String)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"gcp.project.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProject).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.parentId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).ParentId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.number": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Number, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.lifecycleState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).LifecycleState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.createTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).CreateTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.iamPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).IamPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpResourcemanagerBinding).__id, ok = v.Value.(string)
			return
		},
	"gcp.resourcemanager.binding.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.members": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Members, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[gcp] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[gcp] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlGcpProject for the gcp.project resource
type mqlGcpProject struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	ParentId plugin.TValue[string]
	Number plugin.TValue[string]
	State plugin.TValue[string]
	LifecycleState plugin.TValue[string]
	CreateTime plugin.TValue[*time.Time]
	Labels plugin.TValue[map[string]interface{}]
	IamPolicy plugin.TValue[[]interface{}]
}

// createGcpProject creates a new instance of this resource
func createGcpProject(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProject{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProject) MqlName() string {
	return "gcp.project"
}

func (c *mqlGcpProject) MqlID() string {
	return c.__id
}

func (c *mqlGcpProject) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProject) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProject) GetParentId() *plugin.TValue[string] {
	return &c.ParentId
}

func (c *mqlGcpProject) GetNumber() *plugin.TValue[string] {
	return &c.Number
}

func (c *mqlGcpProject) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProject) GetLifecycleState() *plugin.TValue[string] {
	return &c.LifecycleState
}

func (c *mqlGcpProject) GetCreateTime() *plugin.TValue[*time.Time] {
	return &c.CreateTime
}

func (c *mqlGcpProject) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProject) GetIamPolicy() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IamPolicy, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "iamPolicy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.iamPolicy()
	})
}

// mqlGcpResourcemanagerBinding for the gcp.resourcemanager.binding resource
type mqlGcpResourcemanagerBinding struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpResourcemanagerBindingInternal it will be used here
	Id plugin.TValue[string]
	Members plugin.TValue[[]interface{}]
	Role plugin.TValue[string]
}

// createGcpResourcemanagerBinding creates a new instance of this resource
func createGcpResourcemanagerBinding(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpResourcemanagerBinding{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.resourcemanager.binding", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpResourcemanagerBinding) MqlName() string {
	return "gcp.resourcemanager.binding"
}

func (c *mqlGcpResourcemanagerBinding) MqlID() string {
	return c.__id
}

func (c *mqlGcpResourcemanagerBinding) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpResourcemanagerBinding) GetMembers() *plugin.TValue[[]interface{}] {
	return &c.Members
}

func (c *mqlGcpResourcemanagerBinding) GetRole() *plugin.TValue[string] {
	return &c.Role
}
