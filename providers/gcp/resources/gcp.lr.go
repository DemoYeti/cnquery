// Code generated by resources. DO NOT EDIT.
package resources

import (
	"errors"
	"time"

	"go.mondoo.com/cnquery/llx"
	"go.mondoo.com/cnquery/providers-sdk/v1/plugin"
	"go.mondoo.com/cnquery/types"
)

var resourceFactories map[string]plugin.ResourceFactory

func init() {
	resourceFactories = map[string]plugin.ResourceFactory {
		"gcp.project": {
			Init: initGcpProject,
			Create: createGcpProject,
		},
		"gcp.resourcemanager.binding": {
			// to override args, implement: initGcpResourcemanagerBinding(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpResourcemanagerBinding,
		},
		"gcp.service": {
			Init: initGcpService,
			Create: createGcpService,
		},
		"gcp.recommendation": {
			// to override args, implement: initGcpRecommendation(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpRecommendation,
		},
		"gcp.project.gkeService": {
			// to override args, implement: initGcpProjectGkeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeService,
		},
		"gcp.project.gkeService.cluster": {
			// to override args, implement: initGcpProjectGkeServiceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceCluster,
		},
		"gcp.project.gkeService.cluster.addonsConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterAddonsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterAddonsConfig,
		},
		"gcp.project.gkeService.cluster.ipAllocationPolicy": {
			// to override args, implement: initGcpProjectGkeServiceClusterIpAllocationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterIpAllocationPolicy,
		},
		"gcp.project.gkeService.cluster.networkConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNetworkConfig,
		},
		"gcp.project.gkeService.cluster.nodepool": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepool(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepool,
		},
		"gcp.project.gkeService.cluster.nodepool.networkConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolNetworkConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.accelerator": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigAccelerator(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigAccelerator,
		},
		"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.nodeTaint": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigNodeTaint(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigNodeTaint,
		},
		"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures,
		},
		"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig,
		},
		"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes": {
			// to override args, implement: initGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes,
		},
		"gcp.project.iamService.serviceAccount": {
			// to override args, implement: initGcpProjectIamServiceServiceAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectIamServiceServiceAccount,
		},
		"gcp.project.iamService.serviceAccount.key": {
			// to override args, implement: initGcpProjectIamServiceServiceAccountKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectIamServiceServiceAccountKey,
		},
		"gcp.project.computeService.network": {
			Init: initGcpProjectComputeServiceNetwork,
			Create: createGcpProjectComputeServiceNetwork,
		},
		"gcp.project.computeService.subnetwork": {
			Init: initGcpProjectComputeServiceSubnetwork,
			Create: createGcpProjectComputeServiceSubnetwork,
		},
		"gcp.project.computeService.subnetwork.logConfig": {
			// to override args, implement: initGcpProjectComputeServiceSubnetworkLogConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceSubnetworkLogConfig,
		},
		"gcp.project.computeService.region": {
			// to override args, implement: initGcpProjectComputeServiceRegion(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceRegion,
		},
		"gcp.project.iamService": {
			Init: initGcpProjectIamService,
			Create: createGcpProjectIamService,
		},
		"gcp.project.computeService": {
			// to override args, implement: initGcpProjectComputeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeService,
		},
		"gcp.project.computeService.zone": {
			// to override args, implement: initGcpProjectComputeServiceZone(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceZone,
		},
		"gcp.project.computeService.instance": {
			// to override args, implement: initGcpProjectComputeServiceInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceInstance,
		},
		"gcp.project.computeService.serviceaccount": {
			// to override args, implement: initGcpProjectComputeServiceServiceaccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceServiceaccount,
		},
		"gcp.project.computeService.attachedDisk": {
			// to override args, implement: initGcpProjectComputeServiceAttachedDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceAttachedDisk,
		},
		"gcp.project.computeService.machineType": {
			// to override args, implement: initGcpProjectComputeServiceMachineType(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceMachineType,
		},
		"gcp.project.computeService.disk": {
			// to override args, implement: initGcpProjectComputeServiceDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceDisk,
		},
		"gcp.project.computeService.snapshot": {
			// to override args, implement: initGcpProjectComputeServiceSnapshot(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceSnapshot,
		},
		"gcp.project.computeService.image": {
			// to override args, implement: initGcpProjectComputeServiceImage(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceImage,
		},
		"gcp.project.computeService.firewall": {
			// to override args, implement: initGcpProjectComputeServiceFirewall(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceFirewall,
		},
		"gcp.project.computeService.router": {
			// to override args, implement: initGcpProjectComputeServiceRouter(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceRouter,
		},
		"gcp.project.computeService.backendService": {
			// to override args, implement: initGcpProjectComputeServiceBackendService(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceBackendService,
		},
		"gcp.project.computeService.backendService.backend": {
			// to override args, implement: initGcpProjectComputeServiceBackendServiceBackend(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceBackendServiceBackend,
		},
		"gcp.project.computeService.backendService.cdnPolicy": {
			// to override args, implement: initGcpProjectComputeServiceBackendServiceCdnPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceBackendServiceCdnPolicy,
		},
		"gcp.project.computeService.address": {
			// to override args, implement: initGcpProjectComputeServiceAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceAddress,
		},
		"gcp.project.computeService.forwardingRule": {
			// to override args, implement: initGcpProjectComputeServiceForwardingRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (map[string]*llx.RawData, plugin.Resource, error)
			Create: createGcpProjectComputeServiceForwardingRule,
		},
	}
}

// NewResource is used by the runtime of this plugin to create new resources.
// Its arguments may be provided by users. This function is generally not
// used by initializing resources from recordings or from lists.
func NewResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	if f.Init != nil {
		cargs, res, err := f.Init(runtime, args)
		if err != nil {
			return res, err
		}

		if res != nil {
			id := name+"\x00"+res.MqlID()
			if x, ok := runtime.Resources[id]; ok {
				return x, nil
			}
			runtime.Resources[id] = res
			return res, nil
		}

		args = cargs
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

// CreateResource is used by the runtime of this plugin to create resources.
// Its arguments must be complete and pre-processed. This method is used
// for initializing resources from recordings or from lists.
func CreateResource(runtime *plugin.Runtime, name string, args map[string]*llx.RawData) (plugin.Resource, error) {
	f, ok := resourceFactories[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in this provider")
	}

	res, err := f.Create(runtime, args)
	if err != nil {
		return nil, err
	}

	id := name+"\x00"+res.MqlID()
	if x, ok := runtime.Resources[id]; ok {
		return x, nil
	}

	runtime.Resources[id] = res
	return res, nil
}

var getDataFields = map[string]func(r plugin.Resource) *plugin.DataRes{
	"gcp.project.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetId()).ToDataRes(types.String)
	},
	"gcp.project.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetName()).ToDataRes(types.String)
	},
	"gcp.project.parentId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetParentId()).ToDataRes(types.String)
	},
	"gcp.project.number": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetNumber()).ToDataRes(types.String)
	},
	"gcp.project.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetState()).ToDataRes(types.String)
	},
	"gcp.project.lifecycleState": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetLifecycleState()).ToDataRes(types.String)
	},
	"gcp.project.createTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCreateTime()).ToDataRes(types.Time)
	},
	"gcp.project.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.iamPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetIamPolicy()).ToDataRes(types.Array(types.Resource("gcp.resourcemanager.binding")))
	},
	"gcp.project.services": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetServices()).ToDataRes(types.Array(types.Resource("gcp.service")))
	},
	"gcp.project.recommendations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetRecommendations()).ToDataRes(types.Array(types.Resource("gcp.recommendation")))
	},
	"gcp.project.gke": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetGke()).ToDataRes(types.Resource("gcp.project.gkeService"))
	},
	"gcp.project.iam": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetIam()).ToDataRes(types.Resource("gcp.project.iamService"))
	},
	"gcp.project.compute": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProject).GetCompute()).ToDataRes(types.Resource("gcp.project.computeService"))
	},
	"gcp.resourcemanager.binding.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetId()).ToDataRes(types.String)
	},
	"gcp.resourcemanager.binding.members": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetMembers()).ToDataRes(types.Array(types.String))
	},
	"gcp.resourcemanager.binding.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpResourcemanagerBinding).GetRole()).ToDataRes(types.String)
	},
	"gcp.service.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.service.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetName()).ToDataRes(types.String)
	},
	"gcp.service.parentName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetParentName()).ToDataRes(types.String)
	},
	"gcp.service.title": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetTitle()).ToDataRes(types.String)
	},
	"gcp.service.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetState()).ToDataRes(types.String)
	},
	"gcp.service.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpService).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.recommendation.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetId()).ToDataRes(types.String)
	},
	"gcp.recommendation.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.recommendation.zoneName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetZoneName()).ToDataRes(types.String)
	},
	"gcp.recommendation.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetName()).ToDataRes(types.String)
	},
	"gcp.recommendation.recommender": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetRecommender()).ToDataRes(types.String)
	},
	"gcp.recommendation.primaryImpact": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetPrimaryImpact()).ToDataRes(types.Dict)
	},
	"gcp.recommendation.additionalImpact": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetAdditionalImpact()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.recommendation.content": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetContent()).ToDataRes(types.Dict)
	},
	"gcp.recommendation.category": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetCategory()).ToDataRes(types.String)
	},
	"gcp.recommendation.priority": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetPriority()).ToDataRes(types.String)
	},
	"gcp.recommendation.lastRefreshTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetLastRefreshTime()).ToDataRes(types.Time)
	},
	"gcp.recommendation.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpRecommendation).GetState()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.clusters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeService).GetClusters()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster")))
	},
	"gcp.project.gkeService.cluster.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.loggingService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLoggingService()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.monitoringService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetMonitoringService()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetNetwork()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.clusterIpv4Cidr": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetClusterIpv4Cidr()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetSubnetwork()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodePools": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetNodePools()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster.nodepool")))
	},
	"gcp.project.gkeService.cluster.locations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLocations()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.enableKubernetesAlpha": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetEnableKubernetesAlpha()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.autopilotEnabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetAutopilotEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetZone()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.location": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLocation()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.endpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetEndpoint()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.initialClusterVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetInitialClusterVersion()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.currentMasterVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetCurrentMasterVersion()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.resourceLabels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetResourceLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.gkeService.cluster.expirationTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetExpirationTime()).ToDataRes(types.Time)
	},
	"gcp.project.gkeService.cluster.addonsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetAddonsConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.addonsConfig"))
	},
	"gcp.project.gkeService.cluster.workloadIdentityConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetWorkloadIdentityConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetIpAllocationPolicy()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.ipAllocationPolicy"))
	},
	"gcp.project.gkeService.cluster.networkConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetNetworkConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.networkConfig"))
	},
	"gcp.project.gkeService.cluster.binaryAuthorization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetBinaryAuthorization()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.legacyAbac": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetLegacyAbac()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.masterAuth": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetMasterAuth()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.masterAuthorizedNetworksConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetMasterAuthorizedNetworksConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.privateClusterConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetPrivateClusterConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.databaseEncryption": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceCluster).GetDatabaseEncryption()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.addonsConfig.httpLoadBalancing": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetHttpLoadBalancing()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.horizontalPodAutoscaling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetHorizontalPodAutoscaling()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.kubernetesDashboard": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetKubernetesDashboard()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.networkPolicyConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetNetworkPolicyConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.cloudRunConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetCloudRunConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.dnsCacheConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetDnsCacheConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.configConnectorConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetConfigConnectorConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcePersistentDiskCsiDriverConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetGcePersistentDiskCsiDriverConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcpFilestoreCsiDriverConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetGcpFilestoreCsiDriverConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.addonsConfig.gkeBackupAgentConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GetGkeBackupAgentConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useIpAliases": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetUseIpAliases()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.createSubnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetCreateSubnetwork()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.subnetworkName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetSubnetworkName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterSecondaryRangeName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetClusterSecondaryRangeName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesSecondaryRangeName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetServicesSecondaryRangeName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetClusterIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.nodeIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetNodeIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetServicesIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.tpuIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetTpuIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useRoutes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetUseRoutes()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.stackType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetStackType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.ipv6AccessType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).GetIpv6AccessType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.networkPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetNetworkPath()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetNetwork()).ToDataRes(types.Resource("gcp.project.computeService.network"))
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetworkPath": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetSubnetworkPath()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetSubnetwork()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork"))
	},
	"gcp.project.gkeService.cluster.networkConfig.enableIntraNodeVisibility": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetEnableIntraNodeVisibility()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.networkConfig.defaultSnatStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetDefaultSnatStatus()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.networkConfig.enableL4IlbSubsetting": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetEnableL4IlbSubsetting()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.networkConfig.datapathProvider": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetDatapathProvider()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.privateIpv6GoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetPrivateIpv6GoogleAccess()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.networkConfig.dnsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetDnsConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.networkConfig.serviceExternalIpsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).GetServiceExternalIpsConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.nodepool.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetName()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config"))
	},
	"gcp.project.gkeService.cluster.nodepool.initialNodeCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetInitialNodeCount()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.locations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetLocations()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetNetworkConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.networkConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.version": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetVersion()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.instanceGroupUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetInstanceGroupUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.management": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepool).GetManagement()).ToDataRes(types.Dict)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetPodRange()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podIpv4CidrBlock": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetPodIpv4CidrBlock()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).GetPerformanceConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.totalEgressBandwidthTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).GetTotalEgressBandwidthTier()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.machineType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetMachineType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.oauthScopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetOauthScopes()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccountEmail": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetServiceAccountEmail()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetServiceAccount()).ToDataRes(types.Resource("gcp.project.iamService.serviceAccount"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetMetadata()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.imageType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetImageType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.localSsdCount": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetLocalSsdCount()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetTags()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.preemptible": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetPreemptible()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerators": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetAccelerators()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster.nodepool.config.accelerator")))
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetDiskType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.minCpuPlatform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetMinCpuPlatform()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.workloadMetadataMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetWorkloadMetadataMode()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.taints": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetTaints()).ToDataRes(types.Array(types.Resource("gcp.project.gkeService.cluster.nodepool.config.nodeTaint")))
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetSandboxConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.sandboxConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetShieldedInstanceConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetLinuxNodeConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetKubeletConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.kubeletConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.bootDiskKmsKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetBootDiskKmsKey()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetGcfsConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.gcfsConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetAdvancedMachineFeatures()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetGvnicConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.gvnicConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.spot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetSpot()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GetConfidentialNodes()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.confidentialNodes"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.count": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetCount()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuPartitionSize": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetGpuPartitionSize()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GetGpuSharingConfig()).ToDataRes(types.Resource("gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig"))
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.maxSharedClientsPerGpu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).GetMaxSharedClientsPerGpu()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.strategy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).GetStrategy()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.key": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetKey()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.value": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetValue()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.effect": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).GetEffect()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).GetType()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableSecureBoot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).GetEnableSecureBoot()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableIntegrityMonitoring": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).GetEnableIntegrityMonitoring()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.sysctls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).GetSysctls()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuManagerPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetCpuManagerPolicy()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuCfsQuotaPeriod": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetCpuCfsQuotaPeriod()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.podPidsLimit": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).GetPodPidsLimit()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.threadsPerCore": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).GetThreadsPerCore()).ToDataRes(types.Int)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).GetId()).ToDataRes(types.String)
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.enabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).GetEnabled()).ToDataRes(types.Bool)
	},
	"gcp.project.iamService.serviceAccount.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetName()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.uniqueId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetUniqueId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetEmail()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.displayName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetDisplayName()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.oauth2ClientId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetOauth2ClientId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.disabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetDisabled()).ToDataRes(types.Bool)
	},
	"gcp.project.iamService.serviceAccount.keys": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccount).GetKeys()).ToDataRes(types.Array(types.Resource("gcp.project.iamService.serviceAccount.key")))
	},
	"gcp.project.iamService.serviceAccount.key.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetName()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.keyAlgorithm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetKeyAlgorithm()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.validAfterTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetValidAfterTime()).ToDataRes(types.Time)
	},
	"gcp.project.iamService.serviceAccount.key.validBeforeTime": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetValidBeforeTime()).ToDataRes(types.Time)
	},
	"gcp.project.iamService.serviceAccount.key.keyOrigin": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetKeyOrigin()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.keyType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetKeyType()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccount.key.disabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamServiceServiceAccountKey).GetDisabled()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.network.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.autoCreateSubnetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetAutoCreateSubnetworks()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.network.enableUlaInternalIpv6": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetEnableUlaInternalIpv6()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.network.gatewayIPv4": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetGatewayIPv4()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.mtu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetMtu()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.network.networkFirewallPolicyEnforcementOrder": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetNetworkFirewallPolicyEnforcementOrder()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.network.peerings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetPeerings()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.network.routingMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetRoutingMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.mode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.network.subnetworkUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetSubnetworkUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.network.subnetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceNetwork).GetSubnetworks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.subnetwork")))
	},
	"gcp.project.computeService.subnetwork.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.enableFlowLogs": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetEnableFlowLogs()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.subnetwork.externalIpv6Prefix": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetExternalIpv6Prefix()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.fingerprint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetFingerprint()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.gatewayAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetGatewayAddress()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.internalIpv6Prefix": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetInternalIpv6Prefix()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.ipCidrRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetIpCidrRange()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.ipv6AccessType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetIpv6AccessType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.ipv6CidrRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetIpv6CidrRange()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetLogConfig()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork.logConfig"))
	},
	"gcp.project.computeService.subnetwork.privateIpGoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetPrivateIpGoogleAccess()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.subnetwork.privateIpv6GoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetPrivateIpv6GoogleAccess()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.purpose": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetPurpose()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.region": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetRegion()).ToDataRes(types.Resource("gcp.project.computeService.region"))
	},
	"gcp.project.computeService.subnetwork.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.role": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetRole()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.stackType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetStackType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.state": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetState()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetwork).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.subnetwork.logConfig.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.aggregationInterval": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetAggregationInterval()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.enable": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetEnable()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.subnetwork.logConfig.filterExpression": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetFilterExpression()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.flowSampling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetFlowSampling()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.subnetwork.logConfig.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetMetadata()).ToDataRes(types.String)
	},
	"gcp.project.computeService.subnetwork.logConfig.metadataFields": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).GetMetadataFields()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.region.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.region.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.region.quotas": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetQuotas()).ToDataRes(types.Map(types.String, types.Float))
	},
	"gcp.project.computeService.region.deprecated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRegion).GetDeprecated()).ToDataRes(types.Dict)
	},
	"gcp.project.iamService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.iamService.serviceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectIamService).GetServiceAccounts()).ToDataRes(types.Array(types.Resource("gcp.project.iamService.serviceAccount")))
	},
	"gcp.project.computeService.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.regions": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetRegions()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.region")))
	},
	"gcp.project.computeService.zones": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetZones()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.zone")))
	},
	"gcp.project.computeService.instances": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetInstances()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.instance")))
	},
	"gcp.project.computeService.snapshots": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetSnapshots()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.snapshot")))
	},
	"gcp.project.computeService.disks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetDisks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.disk")))
	},
	"gcp.project.computeService.images": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetImages()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.image")))
	},
	"gcp.project.computeService.firewalls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetFirewalls()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.firewall")))
	},
	"gcp.project.computeService.networks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetNetworks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.network")))
	},
	"gcp.project.computeService.subnetworks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetSubnetworks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.subnetwork")))
	},
	"gcp.project.computeService.routers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetRouters()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.router")))
	},
	"gcp.project.computeService.machineTypes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetMachineTypes()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.machineType")))
	},
	"gcp.project.computeService.backendServices": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetBackendServices()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.backendService")))
	},
	"gcp.project.computeService.addresses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetAddresses()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.address")))
	},
	"gcp.project.computeService.forwardingRules": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeService).GetForwardingRules()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.forwardingRule")))
	},
	"gcp.project.computeService.zone.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.zone.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceZone).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.confidentialInstanceConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetConfidentialInstanceConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.instance.canIpForward": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetCanIpForward()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.cpuPlatform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetCpuPlatform()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.deletionProtection": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetDeletionProtection()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.enableDisplay": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableDisplay()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.guestAccelerators": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetGuestAccelerators()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.instance.fingerprint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetFingerprint()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.hostname": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetHostname()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.keyRevocationActionType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetKeyRevocationActionType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.instance.lastStartTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLastStartTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.lastStopTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLastStopTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.lastSuspendedTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetLastSuspendedTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.instance.metadata": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetMetadata()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.instance.minCpuPlatform": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetMinCpuPlatform()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.networkInterfaces": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetNetworkInterfaces()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.instance.privateIpv6GoogleAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetPrivateIpv6GoogleAccess()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.reservationAffinity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetReservationAffinity()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.instance.resourcePolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetResourcePolicies()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.instance.physicalHostResourceStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetPhysicalHostResourceStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.scheduling": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetScheduling()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.instance.enableIntegrityMonitoring": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableIntegrityMonitoring()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.enableSecureBoot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableSecureBoot()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.enableVtpm": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetEnableVtpm()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.startRestricted": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetStartRestricted()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.instance.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.statusMessage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetStatusMessage()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.sourceMachineImage": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetSourceMachineImage()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.tags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetTags()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.instance.totalEgressBandwidthTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetTotalEgressBandwidthTier()).ToDataRes(types.String)
	},
	"gcp.project.computeService.instance.serviceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetServiceAccounts()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.serviceaccount")))
	},
	"gcp.project.computeService.instance.disks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetDisks()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.attachedDisk")))
	},
	"gcp.project.computeService.instance.machineType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetMachineType()).ToDataRes(types.Resource("gcp.project.computeService.machineType"))
	},
	"gcp.project.computeService.instance.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceInstance).GetZone()).ToDataRes(types.Resource("gcp.project.computeService.zone"))
	},
	"gcp.project.computeService.serviceaccount.email": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceServiceaccount).GetEmail()).ToDataRes(types.String)
	},
	"gcp.project.computeService.serviceaccount.scopes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceServiceaccount).GetScopes()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.attachedDisk.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.autoDelete": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetAutoDelete()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.attachedDisk.boot": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetBoot()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.attachedDisk.deviceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetDeviceName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.attachedDisk.forceAttach": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetForceAttach()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.attachedDisk.guestOsFeatures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetGuestOsFeatures()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.attachedDisk.index": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetIndex()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.attachedDisk.interface": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetInterface()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.attachedDisk.mode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.attachedDisk.source": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetSource()).ToDataRes(types.Resource("gcp.project.computeService.disk"))
	},
	"gcp.project.computeService.attachedDisk.type": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAttachedDisk).GetType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.machineType.guestCpus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetGuestCpus()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.isSharedCpu": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetIsSharedCpu()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.machineType.maximumPersistentDisks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetMaximumPersistentDisks()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.maximumPersistentDisksSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetMaximumPersistentDisksSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.memoryMb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetMemoryMb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.machineType.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.machineType.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceMachineType).GetZone()).ToDataRes(types.Resource("gcp.project.computeService.zone"))
	},
	"gcp.project.computeService.disk.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.guestOsFeatures": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetGuestOsFeatures()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.disk.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.disk.lastAttachTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLastAttachTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.disk.lastDetachTimestamp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLastDetachTimestamp()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.disk.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.disk.locationHint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetLocationHint()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.physicalBlockSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetPhysicalBlockSizeBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.disk.provisionedIops": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetProvisionedIops()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.disk.sizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.disk.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.disk.zone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetZone()).ToDataRes(types.Resource("gcp.project.computeService.zone"))
	},
	"gcp.project.computeService.disk.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.disk.diskEncryptionKey": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceDisk).GetDiskEncryptionKey()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.snapshot.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.autoCreated": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetAutoCreated()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.snapshot.chainName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetChainName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.creationSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetCreationSizeBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.downloadBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetDownloadBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.storageBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetStorageBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.snapshot.storageBytesStatus": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetStorageBytesStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.snapshotType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetSnapshotType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.snapshot.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.snapshot.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.snapshot.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.snapshot.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceSnapshot).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.architecture": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetArchitecture()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.archiveSizeBytes": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetArchiveSizeBytes()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.image.diskSizeGb": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetDiskSizeGb()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.image.family": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetFamily()).ToDataRes(types.String)
	},
	"gcp.project.computeService.image.licenses": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetLicenses()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.image.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.image.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.image.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceImage).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.projectId": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetProjectId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.priority": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetPriority()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.firewall.direction": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDirection()).ToDataRes(types.String)
	},
	"gcp.project.computeService.firewall.disabled": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDisabled()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.firewall.sourceRanges": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetSourceRanges()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.sourceServiceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetSourceServiceAccounts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.sourceTags": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetSourceTags()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.destinationRanges": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDestinationRanges()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.targetServiceAccounts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetTargetServiceAccounts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.firewall.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.firewall.allowed": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetAllowed()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.firewall.denied": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceFirewall).GetDenied()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.router.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.router.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.router.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.router.bgp": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetBgp()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.router.bgpPeers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetBgpPeers()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.router.encryptedInterconnectRouter": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetEncryptedInterconnectRouter()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.router.nats": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetNats()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.router.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceRouter).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.backendService.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.affinityCookieTtlSec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetAffinityCookieTtlSec()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backends": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetBackends()).ToDataRes(types.Array(types.Resource("gcp.project.computeService.backendService.backend")))
	},
	"gcp.project.computeService.backendService.cdnPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCdnPolicy()).ToDataRes(types.Resource("gcp.project.computeService.backendService.cdnPolicy"))
	},
	"gcp.project.computeService.backendService.circuitBreakers": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCircuitBreakers()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.compressionMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCompressionMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.connectionDraining": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetConnectionDraining()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.connectionTrackingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetConnectionTrackingPolicy()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.consistentHash": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetConsistentHash()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.backendService.customRequestHeaders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCustomRequestHeaders()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.customResponseHeaders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetCustomResponseHeaders()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.edgeSecurityPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetEdgeSecurityPolicy()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.enableCDN": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetEnableCDN()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.failoverPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetFailoverPolicy()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.healthChecks": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetHealthChecks()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.iap": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetIap()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.loadBalancingScheme": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLoadBalancingScheme()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.localityLbPolicies": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLocalityLbPolicies()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.backendService.localityLbPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLocalityLbPolicy()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.logConfig": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetLogConfig()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.maxStreamDuration": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetMaxStreamDuration()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.backendService.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.networkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetNetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.portName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetPortName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.protocol": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetProtocol()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.securityPolicyUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetSecurityPolicyUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.securitySettings": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetSecuritySettings()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.serviceBindingUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetServiceBindingUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.backendService.sessionAffinity": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetSessionAffinity()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.timeoutSec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendService).GetTimeoutSec()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.balancingMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetBalancingMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.capacityScaler": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetCapacityScaler()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.backend.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.failover": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetFailover()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.backend.groupUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetGroupUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.backend.maxConnections": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxConnections()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerEndpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxConnectionsPerEndpoint()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerInstance": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxConnectionsPerInstance()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxRate": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxRate()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.backend.maxRatePerEndpoint": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxRatePerEndpoint()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.backend.maxRatePerInstance": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxRatePerInstance()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.backend.maxUtilization": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GetMaxUtilization()).ToDataRes(types.Float)
	},
	"gcp.project.computeService.backendService.cdnPolicy.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.cdnPolicy.bypassCacheOnRequestHeaders": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetBypassCacheOnRequestHeaders()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheKeyPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetCacheKeyPolicy()).ToDataRes(types.Dict)
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheMode": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetCacheMode()).ToDataRes(types.String)
	},
	"gcp.project.computeService.backendService.cdnPolicy.clientTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetClientTtl()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.defaultTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetDefaultTtl()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.maxTtl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetMaxTtl()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCaching": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetNegativeCaching()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCachingPolicy": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetNegativeCachingPolicy()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.backendService.cdnPolicy.requestCoalescing": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetRequestCoalescing()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.backendService.cdnPolicy.serveWhileStale": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetServeWhileStale()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlCacheMaxAgeSec": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetSignedUrlCacheMaxAgeSec()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlKeyNames": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).GetSignedUrlKeyNames()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.address.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.address": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetAddress()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.addressType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetAddressType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.address.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.ipVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetIpVersion()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.ipv6EndpointType": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetIpv6EndpointType()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.networkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetNetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetNetwork()).ToDataRes(types.Resource("gcp.project.computeService.network"))
	},
	"gcp.project.computeService.address.networkTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetNetworkTier()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.prefixLength": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetPrefixLength()).ToDataRes(types.Int)
	},
	"gcp.project.computeService.address.purpose": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetPurpose()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.status": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetStatus()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.subnetworkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetSubnetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.address.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetSubnetwork()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork"))
	},
	"gcp.project.computeService.address.resourceUrls": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceAddress).GetResourceUrls()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.forwardingRule.id": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetId()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ipAddress": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIpAddress()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ipProtocol": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIpProtocol()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.allPorts": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetAllPorts()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.allowGlobalAccess": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetAllowGlobalAccess()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.backendService": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetBackendService()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.created": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetCreated()).ToDataRes(types.Time)
	},
	"gcp.project.computeService.forwardingRule.description": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetDescription()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ipVersion": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIpVersion()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.isMirroringCollector": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetIsMirroringCollector()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.labels": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetLabels()).ToDataRes(types.Map(types.String, types.String))
	},
	"gcp.project.computeService.forwardingRule.loadBalancingScheme": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetLoadBalancingScheme()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.metadataFilters": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetMetadataFilters()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.forwardingRule.name": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.networkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.network": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNetwork()).ToDataRes(types.Resource("gcp.project.computeService.network"))
	},
	"gcp.project.computeService.forwardingRule.networkTier": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNetworkTier()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.noAutomateDnsZone": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetNoAutomateDnsZone()).ToDataRes(types.Bool)
	},
	"gcp.project.computeService.forwardingRule.portRange": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetPortRange()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.ports": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetPorts()).ToDataRes(types.Array(types.String))
	},
	"gcp.project.computeService.forwardingRule.regionUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetRegionUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.serviceDirectoryRegistrations": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetServiceDirectoryRegistrations()).ToDataRes(types.Array(types.Dict))
	},
	"gcp.project.computeService.forwardingRule.serviceLabel": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetServiceLabel()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.serviceName": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetServiceName()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.subnetworkUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetSubnetworkUrl()).ToDataRes(types.String)
	},
	"gcp.project.computeService.forwardingRule.subnetwork": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetSubnetwork()).ToDataRes(types.Resource("gcp.project.computeService.subnetwork"))
	},
	"gcp.project.computeService.forwardingRule.targetUrl": func(r plugin.Resource) *plugin.DataRes {
		return (r.(*mqlGcpProjectComputeServiceForwardingRule).GetTargetUrl()).ToDataRes(types.String)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]*llx.RawData) *plugin.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &plugin.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v *llx.RawData) bool {
	"gcp.project.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProject).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.parentId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).ParentId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.number": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Number, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.lifecycleState": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).LifecycleState, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.createTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).CreateTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.iamPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).IamPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.services": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Services, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.recommendations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Recommendations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gke": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Gke, ok = plugin.RawToTValue[*mqlGcpProjectGkeService](v.Value, v.Error)
		return
	},
	"gcp.project.iam": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Iam, ok = plugin.RawToTValue[*mqlGcpProjectIamService](v.Value, v.Error)
		return
	},
	"gcp.project.compute": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProject).Compute, ok = plugin.RawToTValue[*mqlGcpProjectComputeService](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpResourcemanagerBinding).__id, ok = v.Value.(string)
			return
		},
	"gcp.resourcemanager.binding.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.members": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Members, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.resourcemanager.binding.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpResourcemanagerBinding).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpService).__id, ok = v.Value.(string)
			return
		},
	"gcp.service.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.parentName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).ParentName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.title": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).Title, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.service.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpService).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.recommendation.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpRecommendation).__id, ok = v.Value.(string)
			return
		},
	"gcp.recommendation.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.zoneName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).ZoneName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.recommender": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Recommender, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.primaryImpact": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).PrimaryImpact, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.recommendation.additionalImpact": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).AdditionalImpact, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.recommendation.content": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Content, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.recommendation.category": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Category, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.priority": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).Priority, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.recommendation.lastRefreshTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).LastRefreshTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.recommendation.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpRecommendation).State, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.clusters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeService).Clusters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceCluster).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.loggingService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).LoggingService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.monitoringService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).MonitoringService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Network, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.clusterIpv4Cidr": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ClusterIpv4Cidr, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Subnetwork, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodePools": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).NodePools, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.locations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Locations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.enableKubernetesAlpha": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).EnableKubernetesAlpha, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.autopilotEnabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).AutopilotEnabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Zone, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.location": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Location, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.endpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Endpoint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.initialClusterVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).InitialClusterVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.currentMasterVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).CurrentMasterVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.resourceLabels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ResourceLabels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.expirationTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).ExpirationTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).AddonsConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterAddonsConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.workloadIdentityConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).WorkloadIdentityConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).IpAllocationPolicy, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterIpAllocationPolicy](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).NetworkConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNetworkConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.binaryAuthorization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).BinaryAuthorization, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.legacyAbac": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).LegacyAbac, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.masterAuth": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).MasterAuth, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.masterAuthorizedNetworksConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).MasterAuthorizedNetworksConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.privateClusterConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).PrivateClusterConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.databaseEncryption": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceCluster).DatabaseEncryption, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.addonsConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.httpLoadBalancing": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).HttpLoadBalancing, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.horizontalPodAutoscaling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).HorizontalPodAutoscaling, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.kubernetesDashboard": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).KubernetesDashboard, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.networkPolicyConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).NetworkPolicyConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.cloudRunConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).CloudRunConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.dnsCacheConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).DnsCacheConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.configConnectorConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).ConfigConnectorConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcePersistentDiskCsiDriverConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GcePersistentDiskCsiDriverConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.gcpFilestoreCsiDriverConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GcpFilestoreCsiDriverConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.addonsConfig.gkeBackupAgentConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterAddonsConfig).GkeBackupAgentConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useIpAliases": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).UseIpAliases, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.createSubnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).CreateSubnetwork, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.subnetworkName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).SubnetworkName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterSecondaryRangeName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ClusterSecondaryRangeName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesSecondaryRangeName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ServicesSecondaryRangeName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.clusterIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ClusterIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.nodeIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).NodeIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.servicesIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).ServicesIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.tpuIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).TpuIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.useRoutes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).UseRoutes, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.stackType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).StackType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.ipAllocationPolicy.ipv6AccessType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterIpAllocationPolicy).Ipv6AccessType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.networkConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.networkPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).NetworkPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).Network, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceNetwork](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetworkPath": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).SubnetworkPath, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).Subnetwork, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetwork](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.enableIntraNodeVisibility": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).EnableIntraNodeVisibility, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.defaultSnatStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).DefaultSnatStatus, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.enableL4IlbSubsetting": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).EnableL4IlbSubsetting, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.datapathProvider": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).DatapathProvider, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.privateIpv6GoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).PrivateIpv6GoogleAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.dnsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).DnsConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.networkConfig.serviceExternalIpsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNetworkConfig).ServiceExternalIpsConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepool).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Config, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.initialNodeCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).InitialNodeCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.locations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Locations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).NetworkConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.version": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Version, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.instanceGroupUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).InstanceGroupUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.management": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepool).Management, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).PodRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.podIpv4CidrBlock": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).PodIpv4CidrBlock, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig).PerformanceConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig.totalEgressBandwidthTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig).TotalEgressBandwidthTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.machineType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).MachineType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.oauthScopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).OauthScopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccountEmail": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ServiceAccountEmail, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.serviceAccount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ServiceAccount, ok = plugin.RawToTValue[*mqlGcpProjectIamServiceServiceAccount](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Metadata, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.imageType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ImageType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.localSsdCount": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).LocalSsdCount, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.preemptible": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Preemptible, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerators": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Accelerators, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.diskType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).DiskType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.minCpuPlatform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).MinCpuPlatform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.workloadMetadataMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).WorkloadMetadataMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.taints": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Taints, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).SandboxConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ShieldedInstanceConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).LinuxNodeConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).KubeletConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.bootDiskKmsKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).BootDiskKmsKey, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GcfsConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).AdvancedMachineFeatures, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).GvnicConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.spot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).Spot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfig).ConfidentialNodes, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.count": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).Count, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuPartitionSize": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GpuPartitionSize, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator).GpuSharingConfig, ok = plugin.RawToTValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.maxSharedClientsPerGpu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).MaxSharedClientsPerGpu, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig.strategy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig).Strategy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.key": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Key, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.value": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Value, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.nodeTaint.effect": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint).Effect, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.sandboxConfig.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableSecureBoot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).EnableSecureBoot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig.enableIntegrityMonitoring": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig).EnableIntegrityMonitoring, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig.sysctls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig).Sysctls, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuManagerPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).CpuManagerPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.cpuCfsQuotaPeriod": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).CpuCfsQuotaPeriod, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.kubeletConfig.podPidsLimit": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig).PodPidsLimit, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gcfsConfig.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures.threadsPerCore": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures).ThreadsPerCore, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.gvnicConfig.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.gkeService.cluster.nodepool.config.confidentialNodes.enabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes).Enabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectIamServiceServiceAccount).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.iamService.serviceAccount.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.uniqueId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).UniqueId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.displayName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).DisplayName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.oauth2ClientId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Oauth2ClientId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.disabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Disabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.keys": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccount).Keys, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectIamServiceServiceAccountKey).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.iamService.serviceAccount.key.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.keyAlgorithm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).KeyAlgorithm, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.validAfterTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).ValidAfterTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.validBeforeTime": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).ValidBeforeTime, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.keyOrigin": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).KeyOrigin, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.keyType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).KeyType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccount.key.disabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamServiceServiceAccountKey).Disabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceNetwork).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.network.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.autoCreateSubnetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).AutoCreateSubnetworks, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.enableUlaInternalIpv6": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).EnableUlaInternalIpv6, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.gatewayIPv4": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).GatewayIPv4, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.mtu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Mtu, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.networkFirewallPolicyEnforcementOrder": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).NetworkFirewallPolicyEnforcementOrder, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.peerings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Peerings, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.routingMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).RoutingMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.mode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Mode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.subnetworkUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).SubnetworkUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.network.subnetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceNetwork).Subnetworks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceSubnetwork).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.subnetwork.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.enableFlowLogs": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).EnableFlowLogs, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.externalIpv6Prefix": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).ExternalIpv6Prefix, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.fingerprint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Fingerprint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.gatewayAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).GatewayAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.internalIpv6Prefix": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).InternalIpv6Prefix, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.ipCidrRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).IpCidrRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.ipv6AccessType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Ipv6AccessType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.ipv6CidrRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Ipv6CidrRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).LogConfig, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetworkLogConfig](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.privateIpGoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).PrivateIpGoogleAccess, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.privateIpv6GoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).PrivateIpv6GoogleAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.purpose": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Purpose, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.region": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Region, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceRegion](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.role": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Role, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.stackType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).StackType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.state": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).State, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetwork).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.subnetwork.logConfig.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.aggregationInterval": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).AggregationInterval, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.enable": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).Enable, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.filterExpression": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).FilterExpression, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.flowSampling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).FlowSampling, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).Metadata, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetwork.logConfig.metadataFields": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSubnetworkLogConfig).MetadataFields, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceRegion).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.region.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.quotas": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Quotas, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.region.deprecated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRegion).Deprecated, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectIamService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.iamService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.iamService.serviceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectIamService).ServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.regions": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Regions, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zones": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Zones, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instances": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Instances, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshots": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Snapshots, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Disks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.images": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Images, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewalls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Firewalls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.networks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Networks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.subnetworks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Subnetworks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.routers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Routers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineTypes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).MachineTypes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendServices": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).BackendServices, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.addresses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).Addresses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRules": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeService).ForwardingRules, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceZone).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.zone.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.zone.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceZone).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceInstance).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.instance.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.confidentialInstanceConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ConfidentialInstanceConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.canIpForward": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).CanIpForward, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.cpuPlatform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).CpuPlatform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.deletionProtection": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).DeletionProtection, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableDisplay": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableDisplay, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.guestAccelerators": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).GuestAccelerators, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.fingerprint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Fingerprint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.hostname": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Hostname, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.keyRevocationActionType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).KeyRevocationActionType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.lastStartTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).LastStartTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.lastStopTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).LastStopTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.lastSuspendedTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).LastSuspendedTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.metadata": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Metadata, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.minCpuPlatform": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).MinCpuPlatform, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.networkInterfaces": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).NetworkInterfaces, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.privateIpv6GoogleAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).PrivateIpv6GoogleAccess, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.reservationAffinity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ReservationAffinity, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.resourcePolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ResourcePolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.physicalHostResourceStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).PhysicalHostResourceStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.scheduling": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Scheduling, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableIntegrityMonitoring": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableIntegrityMonitoring, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableSecureBoot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableSecureBoot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.enableVtpm": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).EnableVtpm, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.startRestricted": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).StartRestricted, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.statusMessage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).StatusMessage, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.sourceMachineImage": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).SourceMachineImage, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.tags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Tags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.totalEgressBandwidthTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).TotalEgressBandwidthTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.serviceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).ServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.disks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Disks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.machineType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).MachineType, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceMachineType](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.instance.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceInstance).Zone, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceZone](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.serviceaccount.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceServiceaccount).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.serviceaccount.email": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceServiceaccount).Email, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.serviceaccount.scopes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceServiceaccount).Scopes, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceAttachedDisk).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.attachedDisk.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.autoDelete": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).AutoDelete, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.boot": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Boot, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.deviceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).DeviceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.forceAttach": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).ForceAttach, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.guestOsFeatures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).GuestOsFeatures, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.index": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Index, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.interface": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Interface, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.mode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Mode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.source": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Source, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceDisk](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.attachedDisk.type": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAttachedDisk).Type, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceMachineType).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.machineType.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.guestCpus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).GuestCpus, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.isSharedCpu": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).IsSharedCpu, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.maximumPersistentDisks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).MaximumPersistentDisks, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.maximumPersistentDisksSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).MaximumPersistentDisksSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.memoryMb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).MemoryMb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.machineType.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceMachineType).Zone, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceZone](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceDisk).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.disk.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.guestOsFeatures": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).GuestOsFeatures, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.lastAttachTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).LastAttachTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.lastDetachTimestamp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).LastDetachTimestamp, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.locationHint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).LocationHint, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.physicalBlockSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).PhysicalBlockSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.provisionedIops": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).ProvisionedIops, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.sizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).SizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.zone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Zone, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceZone](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.disk.diskEncryptionKey": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceDisk).DiskEncryptionKey, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceSnapshot).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.snapshot.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.autoCreated": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).AutoCreated, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.chainName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).ChainName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.creationSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).CreationSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.downloadBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).DownloadBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.storageBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).StorageBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.storageBytesStatus": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).StorageBytesStatus, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.snapshotType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).SnapshotType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.snapshot.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceSnapshot).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceImage).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.image.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.architecture": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Architecture, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.archiveSizeBytes": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).ArchiveSizeBytes, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.diskSizeGb": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).DiskSizeGb, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.family": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Family, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.licenses": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Licenses, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.image.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceImage).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceFirewall).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.firewall.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.projectId": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).ProjectId, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.priority": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Priority, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.direction": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Direction, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.disabled": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Disabled, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.sourceRanges": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).SourceRanges, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.sourceServiceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).SourceServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.sourceTags": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).SourceTags, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.destinationRanges": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).DestinationRanges, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.targetServiceAccounts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).TargetServiceAccounts, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.allowed": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Allowed, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.firewall.denied": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceFirewall).Denied, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceRouter).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.router.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.bgp": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Bgp, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.bgpPeers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).BgpPeers, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.encryptedInterconnectRouter": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).EncryptedInterconnectRouter, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.nats": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Nats, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.router.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceRouter).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceBackendService).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.backendService.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.affinityCookieTtlSec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).AffinityCookieTtlSec, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backends": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Backends, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CdnPolicy, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceBackendServiceCdnPolicy](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.circuitBreakers": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CircuitBreakers, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.compressionMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CompressionMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.connectionDraining": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ConnectionDraining, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.connectionTrackingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ConnectionTrackingPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.consistentHash": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ConsistentHash, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.customRequestHeaders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CustomRequestHeaders, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.customResponseHeaders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).CustomResponseHeaders, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.edgeSecurityPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).EdgeSecurityPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.enableCDN": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).EnableCDN, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.failoverPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).FailoverPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.healthChecks": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).HealthChecks, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.iap": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Iap, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.loadBalancingScheme": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LoadBalancingScheme, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.localityLbPolicies": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LocalityLbPolicies, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.localityLbPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LocalityLbPolicy, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.logConfig": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).LogConfig, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.maxStreamDuration": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).MaxStreamDuration, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.networkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).NetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.portName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).PortName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.protocol": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).Protocol, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.securityPolicyUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).SecurityPolicyUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.securitySettings": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).SecuritySettings, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.serviceBindingUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).ServiceBindingUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.sessionAffinity": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).SessionAffinity, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.timeoutSec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendService).TimeoutSec, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceBackendServiceBackend).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.backendService.backend.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.balancingMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).BalancingMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.capacityScaler": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).CapacityScaler, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.failover": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).Failover, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.groupUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).GroupUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxConnections": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxConnections, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerEndpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxConnectionsPerEndpoint, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxConnectionsPerInstance": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxConnectionsPerInstance, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxRate": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxRate, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxRatePerEndpoint": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxRatePerEndpoint, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxRatePerInstance": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxRatePerInstance, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.backend.maxUtilization": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceBackend).MaxUtilization, ok = plugin.RawToTValue[float64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.backendService.cdnPolicy.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.bypassCacheOnRequestHeaders": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).BypassCacheOnRequestHeaders, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheKeyPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).CacheKeyPolicy, ok = plugin.RawToTValue[interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.cacheMode": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).CacheMode, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.clientTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).ClientTtl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.defaultTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).DefaultTtl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.maxTtl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).MaxTtl, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCaching": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).NegativeCaching, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.negativeCachingPolicy": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).NegativeCachingPolicy, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.requestCoalescing": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).RequestCoalescing, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.serveWhileStale": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).ServeWhileStale, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlCacheMaxAgeSec": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).SignedUrlCacheMaxAgeSec, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.backendService.cdnPolicy.signedUrlKeyNames": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceBackendServiceCdnPolicy).SignedUrlKeyNames, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceAddress).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.address.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.address": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Address, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.addressType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).AddressType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.ipVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).IpVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.ipv6EndpointType": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Ipv6EndpointType, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.networkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).NetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Network, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceNetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.networkTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).NetworkTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.prefixLength": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).PrefixLength, ok = plugin.RawToTValue[int64](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.purpose": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Purpose, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.status": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Status, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.subnetworkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).SubnetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).Subnetwork, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.address.resourceUrls": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceAddress).ResourceUrls, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.__id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
			r.(*mqlGcpProjectComputeServiceForwardingRule).__id, ok = v.Value.(string)
			return
		},
	"gcp.project.computeService.forwardingRule.id": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Id, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ipAddress": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IpAddress, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ipProtocol": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IpProtocol, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.allPorts": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).AllPorts, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.allowGlobalAccess": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).AllowGlobalAccess, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.backendService": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).BackendService, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.created": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Created, ok = plugin.RawToTValue[*time.Time](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.description": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Description, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ipVersion": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IpVersion, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.isMirroringCollector": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).IsMirroringCollector, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.labels": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Labels, ok = plugin.RawToTValue[map[string]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.loadBalancingScheme": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).LoadBalancingScheme, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.metadataFilters": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).MetadataFilters, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.name": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Name, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.networkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).NetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.network": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Network, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceNetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.networkTier": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).NetworkTier, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.noAutomateDnsZone": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).NoAutomateDnsZone, ok = plugin.RawToTValue[bool](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.portRange": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).PortRange, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.ports": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Ports, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.regionUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).RegionUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.serviceDirectoryRegistrations": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).ServiceDirectoryRegistrations, ok = plugin.RawToTValue[[]interface{}](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.serviceLabel": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).ServiceLabel, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.serviceName": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).ServiceName, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.subnetworkUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).SubnetworkUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.subnetwork": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).Subnetwork, ok = plugin.RawToTValue[*mqlGcpProjectComputeServiceSubnetwork](v.Value, v.Error)
		return
	},
	"gcp.project.computeService.forwardingRule.targetUrl": func(r plugin.Resource, v *llx.RawData) (ok bool) {
		r.(*mqlGcpProjectComputeServiceForwardingRule).TargetUrl, ok = plugin.RawToTValue[string](v.Value, v.Error)
		return
	},
}

func SetData(resource plugin.Resource, field string, val *llx.RawData) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("[gcp] cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("[gcp] cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

func SetAllData(resource plugin.Resource, args map[string]*llx.RawData) error {
	var err error
	for k, v := range args {
		if err = SetData(resource, k, v); err != nil {
			return err
		}
	}
	return nil
}

// mqlGcpProject for the gcp.project resource
type mqlGcpProject struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	ParentId plugin.TValue[string]
	Number plugin.TValue[string]
	State plugin.TValue[string]
	LifecycleState plugin.TValue[string]
	CreateTime plugin.TValue[*time.Time]
	Labels plugin.TValue[map[string]interface{}]
	IamPolicy plugin.TValue[[]interface{}]
	Services plugin.TValue[[]interface{}]
	Recommendations plugin.TValue[[]interface{}]
	Gke plugin.TValue[*mqlGcpProjectGkeService]
	Iam plugin.TValue[*mqlGcpProjectIamService]
	Compute plugin.TValue[*mqlGcpProjectComputeService]
}

// createGcpProject creates a new instance of this resource
func createGcpProject(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProject{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProject) MqlName() string {
	return "gcp.project"
}

func (c *mqlGcpProject) MqlID() string {
	return c.__id
}

func (c *mqlGcpProject) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProject) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProject) GetParentId() *plugin.TValue[string] {
	return &c.ParentId
}

func (c *mqlGcpProject) GetNumber() *plugin.TValue[string] {
	return &c.Number
}

func (c *mqlGcpProject) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProject) GetLifecycleState() *plugin.TValue[string] {
	return &c.LifecycleState
}

func (c *mqlGcpProject) GetCreateTime() *plugin.TValue[*time.Time] {
	return &c.CreateTime
}

func (c *mqlGcpProject) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProject) GetIamPolicy() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.IamPolicy, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "iamPolicy")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.iamPolicy()
	})
}

func (c *mqlGcpProject) GetServices() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Services, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "services")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.services()
	})
}

func (c *mqlGcpProject) GetRecommendations() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Recommendations, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "recommendations")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.recommendations()
	})
}

func (c *mqlGcpProject) GetGke() *plugin.TValue[*mqlGcpProjectGkeService] {
	return plugin.GetOrCompute[*mqlGcpProjectGkeService](&c.Gke, func() (*mqlGcpProjectGkeService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "gke")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectGkeService), nil
			}
		}

		return c.gke()
	})
}

func (c *mqlGcpProject) GetIam() *plugin.TValue[*mqlGcpProjectIamService] {
	return plugin.GetOrCompute[*mqlGcpProjectIamService](&c.Iam, func() (*mqlGcpProjectIamService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "iam")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectIamService), nil
			}
		}

		return c.iam()
	})
}

func (c *mqlGcpProject) GetCompute() *plugin.TValue[*mqlGcpProjectComputeService] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeService](&c.Compute, func() (*mqlGcpProjectComputeService, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project", c.__id, "compute")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeService), nil
			}
		}

		return c.compute()
	})
}

// mqlGcpResourcemanagerBinding for the gcp.resourcemanager.binding resource
type mqlGcpResourcemanagerBinding struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpResourcemanagerBindingInternal it will be used here
	Id plugin.TValue[string]
	Members plugin.TValue[[]interface{}]
	Role plugin.TValue[string]
}

// createGcpResourcemanagerBinding creates a new instance of this resource
func createGcpResourcemanagerBinding(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpResourcemanagerBinding{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	// to override __id implement: id() (string, error)

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.resourcemanager.binding", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpResourcemanagerBinding) MqlName() string {
	return "gcp.resourcemanager.binding"
}

func (c *mqlGcpResourcemanagerBinding) MqlID() string {
	return c.__id
}

func (c *mqlGcpResourcemanagerBinding) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpResourcemanagerBinding) GetMembers() *plugin.TValue[[]interface{}] {
	return &c.Members
}

func (c *mqlGcpResourcemanagerBinding) GetRole() *plugin.TValue[string] {
	return &c.Role
}

// mqlGcpService for the gcp.service resource
type mqlGcpService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	ParentName plugin.TValue[string]
	Title plugin.TValue[string]
	State plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpService creates a new instance of this resource
func createGcpService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.service", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpService) MqlName() string {
	return "gcp.service"
}

func (c *mqlGcpService) MqlID() string {
	return c.__id
}

func (c *mqlGcpService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpService) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpService) GetParentName() *plugin.TValue[string] {
	return &c.ParentName
}

func (c *mqlGcpService) GetTitle() *plugin.TValue[string] {
	return &c.Title
}

func (c *mqlGcpService) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpService) GetEnabled() *plugin.TValue[bool] {
	return plugin.GetOrCompute[bool](&c.Enabled, func() (bool, error) {
		return c.enabled()
	})
}

// mqlGcpRecommendation for the gcp.recommendation resource
type mqlGcpRecommendation struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpRecommendationInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	ZoneName plugin.TValue[string]
	Name plugin.TValue[string]
	Recommender plugin.TValue[string]
	PrimaryImpact plugin.TValue[interface{}]
	AdditionalImpact plugin.TValue[[]interface{}]
	Content plugin.TValue[interface{}]
	Category plugin.TValue[string]
	Priority plugin.TValue[string]
	LastRefreshTime plugin.TValue[*time.Time]
	State plugin.TValue[interface{}]
}

// createGcpRecommendation creates a new instance of this resource
func createGcpRecommendation(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpRecommendation{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.recommendation", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpRecommendation) MqlName() string {
	return "gcp.recommendation"
}

func (c *mqlGcpRecommendation) MqlID() string {
	return c.__id
}

func (c *mqlGcpRecommendation) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpRecommendation) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpRecommendation) GetZoneName() *plugin.TValue[string] {
	return &c.ZoneName
}

func (c *mqlGcpRecommendation) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpRecommendation) GetRecommender() *plugin.TValue[string] {
	return &c.Recommender
}

func (c *mqlGcpRecommendation) GetPrimaryImpact() *plugin.TValue[interface{}] {
	return &c.PrimaryImpact
}

func (c *mqlGcpRecommendation) GetAdditionalImpact() *plugin.TValue[[]interface{}] {
	return &c.AdditionalImpact
}

func (c *mqlGcpRecommendation) GetContent() *plugin.TValue[interface{}] {
	return &c.Content
}

func (c *mqlGcpRecommendation) GetCategory() *plugin.TValue[string] {
	return &c.Category
}

func (c *mqlGcpRecommendation) GetPriority() *plugin.TValue[string] {
	return &c.Priority
}

func (c *mqlGcpRecommendation) GetLastRefreshTime() *plugin.TValue[*time.Time] {
	return &c.LastRefreshTime
}

func (c *mqlGcpRecommendation) GetState() *plugin.TValue[interface{}] {
	return &c.State
}

// mqlGcpProjectGkeService for the gcp.project.gkeService resource
type mqlGcpProjectGkeService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Clusters plugin.TValue[[]interface{}]
}

// createGcpProjectGkeService creates a new instance of this resource
func createGcpProjectGkeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeService) MqlName() string {
	return "gcp.project.gkeService"
}

func (c *mqlGcpProjectGkeService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectGkeService) GetClusters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Clusters, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService", c.__id, "clusters")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.clusters()
	})
}

// mqlGcpProjectGkeServiceCluster for the gcp.project.gkeService.cluster resource
type mqlGcpProjectGkeServiceCluster struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterInternal it will be used here
	ProjectId plugin.TValue[string]
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	LoggingService plugin.TValue[string]
	MonitoringService plugin.TValue[string]
	Network plugin.TValue[string]
	ClusterIpv4Cidr plugin.TValue[string]
	Subnetwork plugin.TValue[string]
	NodePools plugin.TValue[[]interface{}]
	Locations plugin.TValue[[]interface{}]
	EnableKubernetesAlpha plugin.TValue[bool]
	AutopilotEnabled plugin.TValue[bool]
	Zone plugin.TValue[string]
	Location plugin.TValue[string]
	Endpoint plugin.TValue[string]
	InitialClusterVersion plugin.TValue[string]
	CurrentMasterVersion plugin.TValue[string]
	Status plugin.TValue[string]
	ResourceLabels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	ExpirationTime plugin.TValue[*time.Time]
	AddonsConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterAddonsConfig]
	WorkloadIdentityConfig plugin.TValue[interface{}]
	IpAllocationPolicy plugin.TValue[*mqlGcpProjectGkeServiceClusterIpAllocationPolicy]
	NetworkConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNetworkConfig]
	BinaryAuthorization plugin.TValue[interface{}]
	LegacyAbac plugin.TValue[interface{}]
	MasterAuth plugin.TValue[interface{}]
	MasterAuthorizedNetworksConfig plugin.TValue[interface{}]
	PrivateClusterConfig plugin.TValue[interface{}]
	DatabaseEncryption plugin.TValue[interface{}]
}

// createGcpProjectGkeServiceCluster creates a new instance of this resource
func createGcpProjectGkeServiceCluster(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceCluster{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceCluster) MqlName() string {
	return "gcp.project.gkeService.cluster"
}

func (c *mqlGcpProjectGkeServiceCluster) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceCluster) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectGkeServiceCluster) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceCluster) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectGkeServiceCluster) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectGkeServiceCluster) GetLoggingService() *plugin.TValue[string] {
	return &c.LoggingService
}

func (c *mqlGcpProjectGkeServiceCluster) GetMonitoringService() *plugin.TValue[string] {
	return &c.MonitoringService
}

func (c *mqlGcpProjectGkeServiceCluster) GetNetwork() *plugin.TValue[string] {
	return &c.Network
}

func (c *mqlGcpProjectGkeServiceCluster) GetClusterIpv4Cidr() *plugin.TValue[string] {
	return &c.ClusterIpv4Cidr
}

func (c *mqlGcpProjectGkeServiceCluster) GetSubnetwork() *plugin.TValue[string] {
	return &c.Subnetwork
}

func (c *mqlGcpProjectGkeServiceCluster) GetNodePools() *plugin.TValue[[]interface{}] {
	return &c.NodePools
}

func (c *mqlGcpProjectGkeServiceCluster) GetLocations() *plugin.TValue[[]interface{}] {
	return &c.Locations
}

func (c *mqlGcpProjectGkeServiceCluster) GetEnableKubernetesAlpha() *plugin.TValue[bool] {
	return &c.EnableKubernetesAlpha
}

func (c *mqlGcpProjectGkeServiceCluster) GetAutopilotEnabled() *plugin.TValue[bool] {
	return &c.AutopilotEnabled
}

func (c *mqlGcpProjectGkeServiceCluster) GetZone() *plugin.TValue[string] {
	return &c.Zone
}

func (c *mqlGcpProjectGkeServiceCluster) GetLocation() *plugin.TValue[string] {
	return &c.Location
}

func (c *mqlGcpProjectGkeServiceCluster) GetEndpoint() *plugin.TValue[string] {
	return &c.Endpoint
}

func (c *mqlGcpProjectGkeServiceCluster) GetInitialClusterVersion() *plugin.TValue[string] {
	return &c.InitialClusterVersion
}

func (c *mqlGcpProjectGkeServiceCluster) GetCurrentMasterVersion() *plugin.TValue[string] {
	return &c.CurrentMasterVersion
}

func (c *mqlGcpProjectGkeServiceCluster) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectGkeServiceCluster) GetResourceLabels() *plugin.TValue[map[string]interface{}] {
	return &c.ResourceLabels
}

func (c *mqlGcpProjectGkeServiceCluster) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectGkeServiceCluster) GetExpirationTime() *plugin.TValue[*time.Time] {
	return &c.ExpirationTime
}

func (c *mqlGcpProjectGkeServiceCluster) GetAddonsConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterAddonsConfig] {
	return &c.AddonsConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetWorkloadIdentityConfig() *plugin.TValue[interface{}] {
	return &c.WorkloadIdentityConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetIpAllocationPolicy() *plugin.TValue[*mqlGcpProjectGkeServiceClusterIpAllocationPolicy] {
	return &c.IpAllocationPolicy
}

func (c *mqlGcpProjectGkeServiceCluster) GetNetworkConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNetworkConfig] {
	return &c.NetworkConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetBinaryAuthorization() *plugin.TValue[interface{}] {
	return &c.BinaryAuthorization
}

func (c *mqlGcpProjectGkeServiceCluster) GetLegacyAbac() *plugin.TValue[interface{}] {
	return &c.LegacyAbac
}

func (c *mqlGcpProjectGkeServiceCluster) GetMasterAuth() *plugin.TValue[interface{}] {
	return &c.MasterAuth
}

func (c *mqlGcpProjectGkeServiceCluster) GetMasterAuthorizedNetworksConfig() *plugin.TValue[interface{}] {
	return &c.MasterAuthorizedNetworksConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetPrivateClusterConfig() *plugin.TValue[interface{}] {
	return &c.PrivateClusterConfig
}

func (c *mqlGcpProjectGkeServiceCluster) GetDatabaseEncryption() *plugin.TValue[interface{}] {
	return &c.DatabaseEncryption
}

// mqlGcpProjectGkeServiceClusterAddonsConfig for the gcp.project.gkeService.cluster.addonsConfig resource
type mqlGcpProjectGkeServiceClusterAddonsConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterAddonsConfigInternal it will be used here
	Id plugin.TValue[string]
	HttpLoadBalancing plugin.TValue[interface{}]
	HorizontalPodAutoscaling plugin.TValue[interface{}]
	KubernetesDashboard plugin.TValue[interface{}]
	NetworkPolicyConfig plugin.TValue[interface{}]
	CloudRunConfig plugin.TValue[interface{}]
	DnsCacheConfig plugin.TValue[interface{}]
	ConfigConnectorConfig plugin.TValue[interface{}]
	GcePersistentDiskCsiDriverConfig plugin.TValue[interface{}]
	GcpFilestoreCsiDriverConfig plugin.TValue[interface{}]
	GkeBackupAgentConfig plugin.TValue[interface{}]
}

// createGcpProjectGkeServiceClusterAddonsConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterAddonsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterAddonsConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.addonsConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.addonsConfig"
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetHttpLoadBalancing() *plugin.TValue[interface{}] {
	return &c.HttpLoadBalancing
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetHorizontalPodAutoscaling() *plugin.TValue[interface{}] {
	return &c.HorizontalPodAutoscaling
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetKubernetesDashboard() *plugin.TValue[interface{}] {
	return &c.KubernetesDashboard
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetNetworkPolicyConfig() *plugin.TValue[interface{}] {
	return &c.NetworkPolicyConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetCloudRunConfig() *plugin.TValue[interface{}] {
	return &c.CloudRunConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetDnsCacheConfig() *plugin.TValue[interface{}] {
	return &c.DnsCacheConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetConfigConnectorConfig() *plugin.TValue[interface{}] {
	return &c.ConfigConnectorConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetGcePersistentDiskCsiDriverConfig() *plugin.TValue[interface{}] {
	return &c.GcePersistentDiskCsiDriverConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetGcpFilestoreCsiDriverConfig() *plugin.TValue[interface{}] {
	return &c.GcpFilestoreCsiDriverConfig
}

func (c *mqlGcpProjectGkeServiceClusterAddonsConfig) GetGkeBackupAgentConfig() *plugin.TValue[interface{}] {
	return &c.GkeBackupAgentConfig
}

// mqlGcpProjectGkeServiceClusterIpAllocationPolicy for the gcp.project.gkeService.cluster.ipAllocationPolicy resource
type mqlGcpProjectGkeServiceClusterIpAllocationPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterIpAllocationPolicyInternal it will be used here
	Id plugin.TValue[string]
	UseIpAliases plugin.TValue[bool]
	CreateSubnetwork plugin.TValue[bool]
	SubnetworkName plugin.TValue[string]
	ClusterSecondaryRangeName plugin.TValue[string]
	ServicesSecondaryRangeName plugin.TValue[string]
	ClusterIpv4CidrBlock plugin.TValue[string]
	NodeIpv4CidrBlock plugin.TValue[string]
	ServicesIpv4CidrBlock plugin.TValue[string]
	TpuIpv4CidrBlock plugin.TValue[string]
	UseRoutes plugin.TValue[bool]
	StackType plugin.TValue[string]
	Ipv6AccessType plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterIpAllocationPolicy creates a new instance of this resource
func createGcpProjectGkeServiceClusterIpAllocationPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterIpAllocationPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.ipAllocationPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) MqlName() string {
	return "gcp.project.gkeService.cluster.ipAllocationPolicy"
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetUseIpAliases() *plugin.TValue[bool] {
	return &c.UseIpAliases
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetCreateSubnetwork() *plugin.TValue[bool] {
	return &c.CreateSubnetwork
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetSubnetworkName() *plugin.TValue[string] {
	return &c.SubnetworkName
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetClusterSecondaryRangeName() *plugin.TValue[string] {
	return &c.ClusterSecondaryRangeName
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetServicesSecondaryRangeName() *plugin.TValue[string] {
	return &c.ServicesSecondaryRangeName
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetClusterIpv4CidrBlock() *plugin.TValue[string] {
	return &c.ClusterIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetNodeIpv4CidrBlock() *plugin.TValue[string] {
	return &c.NodeIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetServicesIpv4CidrBlock() *plugin.TValue[string] {
	return &c.ServicesIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetTpuIpv4CidrBlock() *plugin.TValue[string] {
	return &c.TpuIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetUseRoutes() *plugin.TValue[bool] {
	return &c.UseRoutes
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetStackType() *plugin.TValue[string] {
	return &c.StackType
}

func (c *mqlGcpProjectGkeServiceClusterIpAllocationPolicy) GetIpv6AccessType() *plugin.TValue[string] {
	return &c.Ipv6AccessType
}

// mqlGcpProjectGkeServiceClusterNetworkConfig for the gcp.project.gkeService.cluster.networkConfig resource
type mqlGcpProjectGkeServiceClusterNetworkConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNetworkConfigInternal it will be used here
	Id plugin.TValue[string]
	NetworkPath plugin.TValue[string]
	Network plugin.TValue[*mqlGcpProjectComputeServiceNetwork]
	SubnetworkPath plugin.TValue[string]
	Subnetwork plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork]
	EnableIntraNodeVisibility plugin.TValue[bool]
	DefaultSnatStatus plugin.TValue[interface{}]
	EnableL4IlbSubsetting plugin.TValue[bool]
	DatapathProvider plugin.TValue[string]
	PrivateIpv6GoogleAccess plugin.TValue[string]
	DnsConfig plugin.TValue[interface{}]
	ServiceExternalIpsConfig plugin.TValue[interface{}]
}

// createGcpProjectGkeServiceClusterNetworkConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNetworkConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.networkConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.networkConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetNetworkPath() *plugin.TValue[string] {
	return &c.NetworkPath
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetNetwork() *plugin.TValue[*mqlGcpProjectComputeServiceNetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceNetwork](&c.Network, func() (*mqlGcpProjectComputeServiceNetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService.cluster.networkConfig", c.__id, "network")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceNetwork), nil
			}
		}

		return c.network()
	})
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetSubnetworkPath() *plugin.TValue[string] {
	return &c.SubnetworkPath
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetSubnetwork() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceSubnetwork](&c.Subnetwork, func() (*mqlGcpProjectComputeServiceSubnetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService.cluster.networkConfig", c.__id, "subnetwork")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceSubnetwork), nil
			}
		}

		return c.subnetwork()
	})
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetEnableIntraNodeVisibility() *plugin.TValue[bool] {
	return &c.EnableIntraNodeVisibility
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetDefaultSnatStatus() *plugin.TValue[interface{}] {
	return &c.DefaultSnatStatus
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetEnableL4IlbSubsetting() *plugin.TValue[bool] {
	return &c.EnableL4IlbSubsetting
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetDatapathProvider() *plugin.TValue[string] {
	return &c.DatapathProvider
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetPrivateIpv6GoogleAccess() *plugin.TValue[string] {
	return &c.PrivateIpv6GoogleAccess
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetDnsConfig() *plugin.TValue[interface{}] {
	return &c.DnsConfig
}

func (c *mqlGcpProjectGkeServiceClusterNetworkConfig) GetServiceExternalIpsConfig() *plugin.TValue[interface{}] {
	return &c.ServiceExternalIpsConfig
}

// mqlGcpProjectGkeServiceClusterNodepool for the gcp.project.gkeService.cluster.nodepool resource
type mqlGcpProjectGkeServiceClusterNodepool struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Config plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfig]
	InitialNodeCount plugin.TValue[int64]
	Locations plugin.TValue[[]interface{}]
	NetworkConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig]
	Version plugin.TValue[string]
	InstanceGroupUrls plugin.TValue[[]interface{}]
	Status plugin.TValue[string]
	Management plugin.TValue[interface{}]
}

// createGcpProjectGkeServiceClusterNodepool creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepool(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepool{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool"
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfig] {
	return &c.Config
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetInitialNodeCount() *plugin.TValue[int64] {
	return &c.InitialNodeCount
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetLocations() *plugin.TValue[[]interface{}] {
	return &c.Locations
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetNetworkConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig] {
	return &c.NetworkConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetVersion() *plugin.TValue[string] {
	return &c.Version
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetInstanceGroupUrls() *plugin.TValue[[]interface{}] {
	return &c.InstanceGroupUrls
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectGkeServiceClusterNodepool) GetManagement() *plugin.TValue[interface{}] {
	return &c.Management
}

// mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig for the gcp.project.gkeService.cluster.nodepool.networkConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigInternal it will be used here
	Id plugin.TValue[string]
	PodRange plugin.TValue[string]
	PodIpv4CidrBlock plugin.TValue[string]
	PerformanceConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig]
}

// createGcpProjectGkeServiceClusterNodepoolNetworkConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolNetworkConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.networkConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.networkConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetPodRange() *plugin.TValue[string] {
	return &c.PodRange
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetPodIpv4CidrBlock() *plugin.TValue[string] {
	return &c.PodIpv4CidrBlock
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfig) GetPerformanceConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig] {
	return &c.PerformanceConfig
}

// mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig for the gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfigInternal it will be used here
	Id plugin.TValue[string]
	TotalEgressBandwidthTier plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.networkConfig.performanceConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolNetworkConfigPerformanceConfig) GetTotalEgressBandwidthTier() *plugin.TValue[string] {
	return &c.TotalEgressBandwidthTier
}

// mqlGcpProjectGkeServiceClusterNodepoolConfig for the gcp.project.gkeService.cluster.nodepool.config resource
type mqlGcpProjectGkeServiceClusterNodepoolConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	MachineType plugin.TValue[string]
	DiskSizeGb plugin.TValue[int64]
	OauthScopes plugin.TValue[[]interface{}]
	ServiceAccountEmail plugin.TValue[string]
	ServiceAccount plugin.TValue[*mqlGcpProjectIamServiceServiceAccount]
	Metadata plugin.TValue[map[string]interface{}]
	ImageType plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	LocalSsdCount plugin.TValue[int64]
	Tags plugin.TValue[[]interface{}]
	Preemptible plugin.TValue[bool]
	Accelerators plugin.TValue[[]interface{}]
	DiskType plugin.TValue[string]
	MinCpuPlatform plugin.TValue[string]
	WorkloadMetadataMode plugin.TValue[string]
	Taints plugin.TValue[[]interface{}]
	SandboxConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig]
	ShieldedInstanceConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig]
	LinuxNodeConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig]
	KubeletConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig]
	BootDiskKmsKey plugin.TValue[string]
	GcfsConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig]
	AdvancedMachineFeatures plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures]
	GvnicConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig]
	Spot plugin.TValue[bool]
	ConfidentialNodes plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes]
}

// createGcpProjectGkeServiceClusterNodepoolConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetMachineType() *plugin.TValue[string] {
	return &c.MachineType
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetOauthScopes() *plugin.TValue[[]interface{}] {
	return &c.OauthScopes
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetServiceAccountEmail() *plugin.TValue[string] {
	return &c.ServiceAccountEmail
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetServiceAccount() *plugin.TValue[*mqlGcpProjectIamServiceServiceAccount] {
	return plugin.GetOrCompute[*mqlGcpProjectIamServiceServiceAccount](&c.ServiceAccount, func() (*mqlGcpProjectIamServiceServiceAccount, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config", c.__id, "serviceAccount")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectIamServiceServiceAccount), nil
			}
		}

		return c.serviceAccount()
	})
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetMetadata() *plugin.TValue[map[string]interface{}] {
	return &c.Metadata
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetImageType() *plugin.TValue[string] {
	return &c.ImageType
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetLocalSsdCount() *plugin.TValue[int64] {
	return &c.LocalSsdCount
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetTags() *plugin.TValue[[]interface{}] {
	return &c.Tags
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetPreemptible() *plugin.TValue[bool] {
	return &c.Preemptible
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetAccelerators() *plugin.TValue[[]interface{}] {
	return &c.Accelerators
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetDiskType() *plugin.TValue[string] {
	return &c.DiskType
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetMinCpuPlatform() *plugin.TValue[string] {
	return &c.MinCpuPlatform
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetWorkloadMetadataMode() *plugin.TValue[string] {
	return &c.WorkloadMetadataMode
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetTaints() *plugin.TValue[[]interface{}] {
	return &c.Taints
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetSandboxConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig] {
	return &c.SandboxConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetShieldedInstanceConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig] {
	return &c.ShieldedInstanceConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetLinuxNodeConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig] {
	return &c.LinuxNodeConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetKubeletConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig] {
	return &c.KubeletConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetBootDiskKmsKey() *plugin.TValue[string] {
	return &c.BootDiskKmsKey
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetGcfsConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig] {
	return &c.GcfsConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetAdvancedMachineFeatures() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures] {
	return &c.AdvancedMachineFeatures
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetGvnicConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig] {
	return &c.GvnicConfig
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetSpot() *plugin.TValue[bool] {
	return &c.Spot
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfig) GetConfidentialNodes() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes] {
	return &c.ConfidentialNodes
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator for the gcp.project.gkeService.cluster.nodepool.config.accelerator resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorInternal it will be used here
	Id plugin.TValue[string]
	Count plugin.TValue[int64]
	Type plugin.TValue[string]
	GpuPartitionSize plugin.TValue[string]
	GpuSharingConfig plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig]
}

// createGcpProjectGkeServiceClusterNodepoolConfigAccelerator creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigAccelerator(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.accelerator", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.accelerator"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetCount() *plugin.TValue[int64] {
	return &c.Count
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetType() *plugin.TValue[string] {
	return &c.Type
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetGpuPartitionSize() *plugin.TValue[string] {
	return &c.GpuPartitionSize
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAccelerator) GetGpuSharingConfig() *plugin.TValue[*mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig] {
	return &c.GpuSharingConfig
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig for the gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfigInternal it will be used here
	Id plugin.TValue[string]
	MaxSharedClientsPerGpu plugin.TValue[int64]
	Strategy plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.accelerator.gpuSharingConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) GetMaxSharedClientsPerGpu() *plugin.TValue[int64] {
	return &c.MaxSharedClientsPerGpu
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAcceleratorGpuSharingConfig) GetStrategy() *plugin.TValue[string] {
	return &c.Strategy
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint for the gcp.project.gkeService.cluster.nodepool.config.nodeTaint resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaintInternal it will be used here
	Id plugin.TValue[string]
	Key plugin.TValue[string]
	Value plugin.TValue[string]
	Effect plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolConfigNodeTaint creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigNodeTaint(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.nodeTaint", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.nodeTaint"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetKey() *plugin.TValue[string] {
	return &c.Key
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetValue() *plugin.TValue[string] {
	return &c.Value
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigNodeTaint) GetEffect() *plugin.TValue[string] {
	return &c.Effect
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig for the gcp.project.gkeService.cluster.nodepool.config.sandboxConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfigInternal it will be used here
	Id plugin.TValue[string]
	Type plugin.TValue[string]
}

// createGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.sandboxConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.sandboxConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigSandboxConfig) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig for the gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfigInternal it will be used here
	Id plugin.TValue[string]
	EnableSecureBoot plugin.TValue[bool]
	EnableIntegrityMonitoring plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.shieldedInstanceConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) GetEnableSecureBoot() *plugin.TValue[bool] {
	return &c.EnableSecureBoot
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigShieldedInstanceConfig) GetEnableIntegrityMonitoring() *plugin.TValue[bool] {
	return &c.EnableIntegrityMonitoring
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig for the gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfigInternal it will be used here
	Id plugin.TValue[string]
	Sysctls plugin.TValue[map[string]interface{}]
}

// createGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.linuxNodeConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigLinuxNodeConfig) GetSysctls() *plugin.TValue[map[string]interface{}] {
	return &c.Sysctls
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig for the gcp.project.gkeService.cluster.nodepool.config.kubeletConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfigInternal it will be used here
	Id plugin.TValue[string]
	CpuManagerPolicy plugin.TValue[string]
	CpuCfsQuotaPeriod plugin.TValue[string]
	PodPidsLimit plugin.TValue[int64]
}

// createGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.kubeletConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.kubeletConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetCpuManagerPolicy() *plugin.TValue[string] {
	return &c.CpuManagerPolicy
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetCpuCfsQuotaPeriod() *plugin.TValue[string] {
	return &c.CpuCfsQuotaPeriod
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigKubeletConfig) GetPodPidsLimit() *plugin.TValue[int64] {
	return &c.PodPidsLimit
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig for the gcp.project.gkeService.cluster.nodepool.config.gcfsConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfigInternal it will be used here
	Id plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.gcfsConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.gcfsConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGcfsConfig) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures for the gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeaturesInternal it will be used here
	Id plugin.TValue[string]
	ThreadsPerCore plugin.TValue[int64]
}

// createGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.advancedMachineFeatures"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigAdvancedMachineFeatures) GetThreadsPerCore() *plugin.TValue[int64] {
	return &c.ThreadsPerCore
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig for the gcp.project.gkeService.cluster.nodepool.config.gvnicConfig resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfigInternal it will be used here
	Id plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.gvnicConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.gvnicConfig"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigGvnicConfig) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes for the gcp.project.gkeService.cluster.nodepool.config.confidentialNodes resource
type mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodesInternal it will be used here
	Id plugin.TValue[string]
	Enabled plugin.TValue[bool]
}

// createGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes creates a new instance of this resource
func createGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.gkeService.cluster.nodepool.config.confidentialNodes", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) MqlName() string {
	return "gcp.project.gkeService.cluster.nodepool.config.confidentialNodes"
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectGkeServiceClusterNodepoolConfigConfidentialNodes) GetEnabled() *plugin.TValue[bool] {
	return &c.Enabled
}

// mqlGcpProjectIamServiceServiceAccount for the gcp.project.iamService.serviceAccount resource
type mqlGcpProjectIamServiceServiceAccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectIamServiceServiceAccountInternal it will be used here
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	UniqueId plugin.TValue[string]
	Email plugin.TValue[string]
	DisplayName plugin.TValue[string]
	Description plugin.TValue[string]
	Oauth2ClientId plugin.TValue[string]
	Disabled plugin.TValue[bool]
	Keys plugin.TValue[[]interface{}]
}

// createGcpProjectIamServiceServiceAccount creates a new instance of this resource
func createGcpProjectIamServiceServiceAccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectIamServiceServiceAccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.iamService.serviceAccount", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectIamServiceServiceAccount) MqlName() string {
	return "gcp.project.iamService.serviceAccount"
}

func (c *mqlGcpProjectIamServiceServiceAccount) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetUniqueId() *plugin.TValue[string] {
	return &c.UniqueId
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetDisplayName() *plugin.TValue[string] {
	return &c.DisplayName
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetOauth2ClientId() *plugin.TValue[string] {
	return &c.Oauth2ClientId
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetDisabled() *plugin.TValue[bool] {
	return &c.Disabled
}

func (c *mqlGcpProjectIamServiceServiceAccount) GetKeys() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Keys, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.iamService.serviceAccount", c.__id, "keys")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.keys()
	})
}

// mqlGcpProjectIamServiceServiceAccountKey for the gcp.project.iamService.serviceAccount.key resource
type mqlGcpProjectIamServiceServiceAccountKey struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectIamServiceServiceAccountKeyInternal it will be used here
	Name plugin.TValue[string]
	KeyAlgorithm plugin.TValue[string]
	ValidAfterTime plugin.TValue[*time.Time]
	ValidBeforeTime plugin.TValue[*time.Time]
	KeyOrigin plugin.TValue[string]
	KeyType plugin.TValue[string]
	Disabled plugin.TValue[bool]
}

// createGcpProjectIamServiceServiceAccountKey creates a new instance of this resource
func createGcpProjectIamServiceServiceAccountKey(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectIamServiceServiceAccountKey{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.iamService.serviceAccount.key", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) MqlName() string {
	return "gcp.project.iamService.serviceAccount.key"
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetKeyAlgorithm() *plugin.TValue[string] {
	return &c.KeyAlgorithm
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetValidAfterTime() *plugin.TValue[*time.Time] {
	return &c.ValidAfterTime
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetValidBeforeTime() *plugin.TValue[*time.Time] {
	return &c.ValidBeforeTime
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetKeyOrigin() *plugin.TValue[string] {
	return &c.KeyOrigin
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetKeyType() *plugin.TValue[string] {
	return &c.KeyType
}

func (c *mqlGcpProjectIamServiceServiceAccountKey) GetDisabled() *plugin.TValue[bool] {
	return &c.Disabled
}

// mqlGcpProjectComputeServiceNetwork for the gcp.project.computeService.network resource
type mqlGcpProjectComputeServiceNetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceNetworkInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	AutoCreateSubnetworks plugin.TValue[bool]
	EnableUlaInternalIpv6 plugin.TValue[bool]
	GatewayIPv4 plugin.TValue[string]
	Mtu plugin.TValue[int64]
	NetworkFirewallPolicyEnforcementOrder plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Peerings plugin.TValue[[]interface{}]
	RoutingMode plugin.TValue[string]
	Mode plugin.TValue[string]
	SubnetworkUrls plugin.TValue[[]interface{}]
	Subnetworks plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceNetwork creates a new instance of this resource
func createGcpProjectComputeServiceNetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceNetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.network", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceNetwork) MqlName() string {
	return "gcp.project.computeService.network"
}

func (c *mqlGcpProjectComputeServiceNetwork) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceNetwork) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceNetwork) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceNetwork) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceNetwork) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceNetwork) GetAutoCreateSubnetworks() *plugin.TValue[bool] {
	return &c.AutoCreateSubnetworks
}

func (c *mqlGcpProjectComputeServiceNetwork) GetEnableUlaInternalIpv6() *plugin.TValue[bool] {
	return &c.EnableUlaInternalIpv6
}

func (c *mqlGcpProjectComputeServiceNetwork) GetGatewayIPv4() *plugin.TValue[string] {
	return &c.GatewayIPv4
}

func (c *mqlGcpProjectComputeServiceNetwork) GetMtu() *plugin.TValue[int64] {
	return &c.Mtu
}

func (c *mqlGcpProjectComputeServiceNetwork) GetNetworkFirewallPolicyEnforcementOrder() *plugin.TValue[string] {
	return &c.NetworkFirewallPolicyEnforcementOrder
}

func (c *mqlGcpProjectComputeServiceNetwork) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceNetwork) GetPeerings() *plugin.TValue[[]interface{}] {
	return &c.Peerings
}

func (c *mqlGcpProjectComputeServiceNetwork) GetRoutingMode() *plugin.TValue[string] {
	return &c.RoutingMode
}

func (c *mqlGcpProjectComputeServiceNetwork) GetMode() *plugin.TValue[string] {
	return &c.Mode
}

func (c *mqlGcpProjectComputeServiceNetwork) GetSubnetworkUrls() *plugin.TValue[[]interface{}] {
	return &c.SubnetworkUrls
}

func (c *mqlGcpProjectComputeServiceNetwork) GetSubnetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subnetworks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.network", c.__id, "subnetworks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.subnetworks()
	})
}

// mqlGcpProjectComputeServiceSubnetwork for the gcp.project.computeService.subnetwork resource
type mqlGcpProjectComputeServiceSubnetwork struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceSubnetworkInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	EnableFlowLogs plugin.TValue[bool]
	ExternalIpv6Prefix plugin.TValue[string]
	Fingerprint plugin.TValue[string]
	GatewayAddress plugin.TValue[string]
	InternalIpv6Prefix plugin.TValue[string]
	IpCidrRange plugin.TValue[string]
	Ipv6AccessType plugin.TValue[string]
	Ipv6CidrRange plugin.TValue[string]
	LogConfig plugin.TValue[*mqlGcpProjectComputeServiceSubnetworkLogConfig]
	PrivateIpGoogleAccess plugin.TValue[bool]
	PrivateIpv6GoogleAccess plugin.TValue[string]
	Purpose plugin.TValue[string]
	Region plugin.TValue[*mqlGcpProjectComputeServiceRegion]
	RegionUrl plugin.TValue[string]
	Role plugin.TValue[string]
	StackType plugin.TValue[string]
	State plugin.TValue[string]
	Created plugin.TValue[*time.Time]
}

// createGcpProjectComputeServiceSubnetwork creates a new instance of this resource
func createGcpProjectComputeServiceSubnetwork(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceSubnetwork{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.subnetwork", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceSubnetwork) MqlName() string {
	return "gcp.project.computeService.subnetwork"
}

func (c *mqlGcpProjectComputeServiceSubnetwork) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetEnableFlowLogs() *plugin.TValue[bool] {
	return &c.EnableFlowLogs
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetExternalIpv6Prefix() *plugin.TValue[string] {
	return &c.ExternalIpv6Prefix
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetFingerprint() *plugin.TValue[string] {
	return &c.Fingerprint
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetGatewayAddress() *plugin.TValue[string] {
	return &c.GatewayAddress
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetInternalIpv6Prefix() *plugin.TValue[string] {
	return &c.InternalIpv6Prefix
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetIpCidrRange() *plugin.TValue[string] {
	return &c.IpCidrRange
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetIpv6AccessType() *plugin.TValue[string] {
	return &c.Ipv6AccessType
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetIpv6CidrRange() *plugin.TValue[string] {
	return &c.Ipv6CidrRange
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetLogConfig() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetworkLogConfig] {
	return &c.LogConfig
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetPrivateIpGoogleAccess() *plugin.TValue[bool] {
	return &c.PrivateIpGoogleAccess
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetPrivateIpv6GoogleAccess() *plugin.TValue[string] {
	return &c.PrivateIpv6GoogleAccess
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetPurpose() *plugin.TValue[string] {
	return &c.Purpose
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetRegion() *plugin.TValue[*mqlGcpProjectComputeServiceRegion] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceRegion](&c.Region, func() (*mqlGcpProjectComputeServiceRegion, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.subnetwork", c.__id, "region")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceRegion), nil
			}
		}

		return c.region()
	})
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetRole() *plugin.TValue[string] {
	return &c.Role
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetStackType() *plugin.TValue[string] {
	return &c.StackType
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetState() *plugin.TValue[string] {
	return &c.State
}

func (c *mqlGcpProjectComputeServiceSubnetwork) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

// mqlGcpProjectComputeServiceSubnetworkLogConfig for the gcp.project.computeService.subnetwork.logConfig resource
type mqlGcpProjectComputeServiceSubnetworkLogConfig struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceSubnetworkLogConfigInternal it will be used here
	Id plugin.TValue[string]
	AggregationInterval plugin.TValue[string]
	Enable plugin.TValue[bool]
	FilterExpression plugin.TValue[string]
	FlowSampling plugin.TValue[float64]
	Metadata plugin.TValue[string]
	MetadataFields plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceSubnetworkLogConfig creates a new instance of this resource
func createGcpProjectComputeServiceSubnetworkLogConfig(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceSubnetworkLogConfig{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.subnetwork.logConfig", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) MqlName() string {
	return "gcp.project.computeService.subnetwork.logConfig"
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetAggregationInterval() *plugin.TValue[string] {
	return &c.AggregationInterval
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetEnable() *plugin.TValue[bool] {
	return &c.Enable
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetFilterExpression() *plugin.TValue[string] {
	return &c.FilterExpression
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetFlowSampling() *plugin.TValue[float64] {
	return &c.FlowSampling
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetMetadata() *plugin.TValue[string] {
	return &c.Metadata
}

func (c *mqlGcpProjectComputeServiceSubnetworkLogConfig) GetMetadataFields() *plugin.TValue[[]interface{}] {
	return &c.MetadataFields
}

// mqlGcpProjectComputeServiceRegion for the gcp.project.computeService.region resource
type mqlGcpProjectComputeServiceRegion struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceRegionInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Status plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Quotas plugin.TValue[map[string]interface{}]
	Deprecated plugin.TValue[interface{}]
}

// createGcpProjectComputeServiceRegion creates a new instance of this resource
func createGcpProjectComputeServiceRegion(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceRegion{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.region", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceRegion) MqlName() string {
	return "gcp.project.computeService.region"
}

func (c *mqlGcpProjectComputeServiceRegion) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceRegion) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceRegion) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceRegion) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceRegion) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceRegion) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceRegion) GetQuotas() *plugin.TValue[map[string]interface{}] {
	return &c.Quotas
}

func (c *mqlGcpProjectComputeServiceRegion) GetDeprecated() *plugin.TValue[interface{}] {
	return &c.Deprecated
}

// mqlGcpProjectIamService for the gcp.project.iamService resource
type mqlGcpProjectIamService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectIamServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	ServiceAccounts plugin.TValue[[]interface{}]
}

// createGcpProjectIamService creates a new instance of this resource
func createGcpProjectIamService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectIamService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.iamService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectIamService) MqlName() string {
	return "gcp.project.iamService"
}

func (c *mqlGcpProjectIamService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectIamService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectIamService) GetServiceAccounts() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ServiceAccounts, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.iamService", c.__id, "serviceAccounts")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.serviceAccounts()
	})
}

// mqlGcpProjectComputeService for the gcp.project.computeService resource
type mqlGcpProjectComputeService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceInternal it will be used here
	ProjectId plugin.TValue[string]
	Regions plugin.TValue[[]interface{}]
	Zones plugin.TValue[[]interface{}]
	Instances plugin.TValue[[]interface{}]
	Snapshots plugin.TValue[[]interface{}]
	Disks plugin.TValue[[]interface{}]
	Images plugin.TValue[[]interface{}]
	Firewalls plugin.TValue[[]interface{}]
	Networks plugin.TValue[[]interface{}]
	Subnetworks plugin.TValue[[]interface{}]
	Routers plugin.TValue[[]interface{}]
	MachineTypes plugin.TValue[[]interface{}]
	BackendServices plugin.TValue[[]interface{}]
	Addresses plugin.TValue[[]interface{}]
	ForwardingRules plugin.TValue[[]interface{}]
}

// createGcpProjectComputeService creates a new instance of this resource
func createGcpProjectComputeService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeService) MqlName() string {
	return "gcp.project.computeService"
}

func (c *mqlGcpProjectComputeService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeService) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeService) GetRegions() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Regions, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "regions")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.regions()
	})
}

func (c *mqlGcpProjectComputeService) GetZones() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Zones, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "zones")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.zones()
	})
}

func (c *mqlGcpProjectComputeService) GetInstances() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Instances, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "instances")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.instances()
	})
}

func (c *mqlGcpProjectComputeService) GetSnapshots() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Snapshots, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "snapshots")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.snapshots()
	})
}

func (c *mqlGcpProjectComputeService) GetDisks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Disks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "disks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.disks()
	})
}

func (c *mqlGcpProjectComputeService) GetImages() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Images, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "images")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.images()
	})
}

func (c *mqlGcpProjectComputeService) GetFirewalls() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Firewalls, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "firewalls")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.firewalls()
	})
}

func (c *mqlGcpProjectComputeService) GetNetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Networks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "networks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.networks()
	})
}

func (c *mqlGcpProjectComputeService) GetSubnetworks() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Subnetworks, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "subnetworks")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.subnetworks()
	})
}

func (c *mqlGcpProjectComputeService) GetRouters() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Routers, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "routers")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.routers()
	})
}

func (c *mqlGcpProjectComputeService) GetMachineTypes() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.MachineTypes, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "machineTypes")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.machineTypes()
	})
}

func (c *mqlGcpProjectComputeService) GetBackendServices() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.BackendServices, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "backendServices")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.backendServices()
	})
}

func (c *mqlGcpProjectComputeService) GetAddresses() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.Addresses, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "addresses")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.addresses()
	})
}

func (c *mqlGcpProjectComputeService) GetForwardingRules() *plugin.TValue[[]interface{}] {
	return plugin.GetOrCompute[[]interface{}](&c.ForwardingRules, func() ([]interface{}, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService", c.__id, "forwardingRules")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.([]interface{}), nil
			}
		}

		return c.forwardingRules()
	})
}

// mqlGcpProjectComputeServiceZone for the gcp.project.computeService.zone resource
type mqlGcpProjectComputeServiceZone struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceZoneInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Status plugin.TValue[string]
	Created plugin.TValue[*time.Time]
}

// createGcpProjectComputeServiceZone creates a new instance of this resource
func createGcpProjectComputeServiceZone(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceZone{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.zone", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceZone) MqlName() string {
	return "gcp.project.computeService.zone"
}

func (c *mqlGcpProjectComputeServiceZone) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceZone) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceZone) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceZone) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceZone) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceZone) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

// mqlGcpProjectComputeServiceInstance for the gcp.project.computeService.instance resource
type mqlGcpProjectComputeServiceInstance struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectComputeServiceInstanceInternal
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	ConfidentialInstanceConfig plugin.TValue[interface{}]
	CanIpForward plugin.TValue[bool]
	CpuPlatform plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	DeletionProtection plugin.TValue[bool]
	EnableDisplay plugin.TValue[bool]
	GuestAccelerators plugin.TValue[[]interface{}]
	Fingerprint plugin.TValue[string]
	Hostname plugin.TValue[string]
	KeyRevocationActionType plugin.TValue[string]
	Labels plugin.TValue[map[string]interface{}]
	LastStartTimestamp plugin.TValue[*time.Time]
	LastStopTimestamp plugin.TValue[*time.Time]
	LastSuspendedTimestamp plugin.TValue[*time.Time]
	Metadata plugin.TValue[map[string]interface{}]
	MinCpuPlatform plugin.TValue[string]
	NetworkInterfaces plugin.TValue[[]interface{}]
	PrivateIpv6GoogleAccess plugin.TValue[string]
	ReservationAffinity plugin.TValue[interface{}]
	ResourcePolicies plugin.TValue[[]interface{}]
	PhysicalHostResourceStatus plugin.TValue[string]
	Scheduling plugin.TValue[interface{}]
	EnableIntegrityMonitoring plugin.TValue[bool]
	EnableSecureBoot plugin.TValue[bool]
	EnableVtpm plugin.TValue[bool]
	StartRestricted plugin.TValue[bool]
	Status plugin.TValue[string]
	StatusMessage plugin.TValue[string]
	SourceMachineImage plugin.TValue[string]
	Tags plugin.TValue[[]interface{}]
	TotalEgressBandwidthTier plugin.TValue[string]
	ServiceAccounts plugin.TValue[[]interface{}]
	Disks plugin.TValue[[]interface{}]
	MachineType plugin.TValue[*mqlGcpProjectComputeServiceMachineType]
	Zone plugin.TValue[*mqlGcpProjectComputeServiceZone]
}

// createGcpProjectComputeServiceInstance creates a new instance of this resource
func createGcpProjectComputeServiceInstance(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceInstance{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.instance", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceInstance) MqlName() string {
	return "gcp.project.computeService.instance"
}

func (c *mqlGcpProjectComputeServiceInstance) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceInstance) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceInstance) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceInstance) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceInstance) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceInstance) GetConfidentialInstanceConfig() *plugin.TValue[interface{}] {
	return &c.ConfidentialInstanceConfig
}

func (c *mqlGcpProjectComputeServiceInstance) GetCanIpForward() *plugin.TValue[bool] {
	return &c.CanIpForward
}

func (c *mqlGcpProjectComputeServiceInstance) GetCpuPlatform() *plugin.TValue[string] {
	return &c.CpuPlatform
}

func (c *mqlGcpProjectComputeServiceInstance) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceInstance) GetDeletionProtection() *plugin.TValue[bool] {
	return &c.DeletionProtection
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableDisplay() *plugin.TValue[bool] {
	return &c.EnableDisplay
}

func (c *mqlGcpProjectComputeServiceInstance) GetGuestAccelerators() *plugin.TValue[[]interface{}] {
	return &c.GuestAccelerators
}

func (c *mqlGcpProjectComputeServiceInstance) GetFingerprint() *plugin.TValue[string] {
	return &c.Fingerprint
}

func (c *mqlGcpProjectComputeServiceInstance) GetHostname() *plugin.TValue[string] {
	return &c.Hostname
}

func (c *mqlGcpProjectComputeServiceInstance) GetKeyRevocationActionType() *plugin.TValue[string] {
	return &c.KeyRevocationActionType
}

func (c *mqlGcpProjectComputeServiceInstance) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceInstance) GetLastStartTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastStartTimestamp
}

func (c *mqlGcpProjectComputeServiceInstance) GetLastStopTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastStopTimestamp
}

func (c *mqlGcpProjectComputeServiceInstance) GetLastSuspendedTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastSuspendedTimestamp
}

func (c *mqlGcpProjectComputeServiceInstance) GetMetadata() *plugin.TValue[map[string]interface{}] {
	return &c.Metadata
}

func (c *mqlGcpProjectComputeServiceInstance) GetMinCpuPlatform() *plugin.TValue[string] {
	return &c.MinCpuPlatform
}

func (c *mqlGcpProjectComputeServiceInstance) GetNetworkInterfaces() *plugin.TValue[[]interface{}] {
	return &c.NetworkInterfaces
}

func (c *mqlGcpProjectComputeServiceInstance) GetPrivateIpv6GoogleAccess() *plugin.TValue[string] {
	return &c.PrivateIpv6GoogleAccess
}

func (c *mqlGcpProjectComputeServiceInstance) GetReservationAffinity() *plugin.TValue[interface{}] {
	return &c.ReservationAffinity
}

func (c *mqlGcpProjectComputeServiceInstance) GetResourcePolicies() *plugin.TValue[[]interface{}] {
	return &c.ResourcePolicies
}

func (c *mqlGcpProjectComputeServiceInstance) GetPhysicalHostResourceStatus() *plugin.TValue[string] {
	return &c.PhysicalHostResourceStatus
}

func (c *mqlGcpProjectComputeServiceInstance) GetScheduling() *plugin.TValue[interface{}] {
	return &c.Scheduling
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableIntegrityMonitoring() *plugin.TValue[bool] {
	return &c.EnableIntegrityMonitoring
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableSecureBoot() *plugin.TValue[bool] {
	return &c.EnableSecureBoot
}

func (c *mqlGcpProjectComputeServiceInstance) GetEnableVtpm() *plugin.TValue[bool] {
	return &c.EnableVtpm
}

func (c *mqlGcpProjectComputeServiceInstance) GetStartRestricted() *plugin.TValue[bool] {
	return &c.StartRestricted
}

func (c *mqlGcpProjectComputeServiceInstance) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceInstance) GetStatusMessage() *plugin.TValue[string] {
	return &c.StatusMessage
}

func (c *mqlGcpProjectComputeServiceInstance) GetSourceMachineImage() *plugin.TValue[string] {
	return &c.SourceMachineImage
}

func (c *mqlGcpProjectComputeServiceInstance) GetTags() *plugin.TValue[[]interface{}] {
	return &c.Tags
}

func (c *mqlGcpProjectComputeServiceInstance) GetTotalEgressBandwidthTier() *plugin.TValue[string] {
	return &c.TotalEgressBandwidthTier
}

func (c *mqlGcpProjectComputeServiceInstance) GetServiceAccounts() *plugin.TValue[[]interface{}] {
	return &c.ServiceAccounts
}

func (c *mqlGcpProjectComputeServiceInstance) GetDisks() *plugin.TValue[[]interface{}] {
	return &c.Disks
}

func (c *mqlGcpProjectComputeServiceInstance) GetMachineType() *plugin.TValue[*mqlGcpProjectComputeServiceMachineType] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceMachineType](&c.MachineType, func() (*mqlGcpProjectComputeServiceMachineType, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.instance", c.__id, "machineType")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceMachineType), nil
			}
		}

		return c.machineType()
	})
}

func (c *mqlGcpProjectComputeServiceInstance) GetZone() *plugin.TValue[*mqlGcpProjectComputeServiceZone] {
	return &c.Zone
}

// mqlGcpProjectComputeServiceServiceaccount for the gcp.project.computeService.serviceaccount resource
type mqlGcpProjectComputeServiceServiceaccount struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceServiceaccountInternal it will be used here
	Email plugin.TValue[string]
	Scopes plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceServiceaccount creates a new instance of this resource
func createGcpProjectComputeServiceServiceaccount(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceServiceaccount{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.serviceaccount", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceServiceaccount) MqlName() string {
	return "gcp.project.computeService.serviceaccount"
}

func (c *mqlGcpProjectComputeServiceServiceaccount) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceServiceaccount) GetEmail() *plugin.TValue[string] {
	return &c.Email
}

func (c *mqlGcpProjectComputeServiceServiceaccount) GetScopes() *plugin.TValue[[]interface{}] {
	return &c.Scopes
}

// mqlGcpProjectComputeServiceAttachedDisk for the gcp.project.computeService.attachedDisk resource
type mqlGcpProjectComputeServiceAttachedDisk struct {
	MqlRuntime *plugin.Runtime
	__id string
	mqlGcpProjectComputeServiceAttachedDiskInternal
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Architecture plugin.TValue[string]
	AutoDelete plugin.TValue[bool]
	Boot plugin.TValue[bool]
	DeviceName plugin.TValue[string]
	DiskSizeGb plugin.TValue[int64]
	ForceAttach plugin.TValue[bool]
	GuestOsFeatures plugin.TValue[[]interface{}]
	Index plugin.TValue[int64]
	Interface plugin.TValue[string]
	Licenses plugin.TValue[[]interface{}]
	Mode plugin.TValue[string]
	Source plugin.TValue[*mqlGcpProjectComputeServiceDisk]
	Type plugin.TValue[string]
}

// createGcpProjectComputeServiceAttachedDisk creates a new instance of this resource
func createGcpProjectComputeServiceAttachedDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceAttachedDisk{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.attachedDisk", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) MqlName() string {
	return "gcp.project.computeService.attachedDisk"
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetAutoDelete() *plugin.TValue[bool] {
	return &c.AutoDelete
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetBoot() *plugin.TValue[bool] {
	return &c.Boot
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetDeviceName() *plugin.TValue[string] {
	return &c.DeviceName
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetForceAttach() *plugin.TValue[bool] {
	return &c.ForceAttach
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetGuestOsFeatures() *plugin.TValue[[]interface{}] {
	return &c.GuestOsFeatures
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetIndex() *plugin.TValue[int64] {
	return &c.Index
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetInterface() *plugin.TValue[string] {
	return &c.Interface
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetMode() *plugin.TValue[string] {
	return &c.Mode
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetSource() *plugin.TValue[*mqlGcpProjectComputeServiceDisk] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceDisk](&c.Source, func() (*mqlGcpProjectComputeServiceDisk, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.attachedDisk", c.__id, "source")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceDisk), nil
			}
		}

		return c.source()
	})
}

func (c *mqlGcpProjectComputeServiceAttachedDisk) GetType() *plugin.TValue[string] {
	return &c.Type
}

// mqlGcpProjectComputeServiceMachineType for the gcp.project.computeService.machineType resource
type mqlGcpProjectComputeServiceMachineType struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceMachineTypeInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	GuestCpus plugin.TValue[int64]
	IsSharedCpu plugin.TValue[bool]
	MaximumPersistentDisks plugin.TValue[int64]
	MaximumPersistentDisksSizeGb plugin.TValue[int64]
	MemoryMb plugin.TValue[int64]
	Created plugin.TValue[*time.Time]
	Zone plugin.TValue[*mqlGcpProjectComputeServiceZone]
}

// createGcpProjectComputeServiceMachineType creates a new instance of this resource
func createGcpProjectComputeServiceMachineType(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceMachineType{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.machineType", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceMachineType) MqlName() string {
	return "gcp.project.computeService.machineType"
}

func (c *mqlGcpProjectComputeServiceMachineType) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceMachineType) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceMachineType) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceMachineType) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceMachineType) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceMachineType) GetGuestCpus() *plugin.TValue[int64] {
	return &c.GuestCpus
}

func (c *mqlGcpProjectComputeServiceMachineType) GetIsSharedCpu() *plugin.TValue[bool] {
	return &c.IsSharedCpu
}

func (c *mqlGcpProjectComputeServiceMachineType) GetMaximumPersistentDisks() *plugin.TValue[int64] {
	return &c.MaximumPersistentDisks
}

func (c *mqlGcpProjectComputeServiceMachineType) GetMaximumPersistentDisksSizeGb() *plugin.TValue[int64] {
	return &c.MaximumPersistentDisksSizeGb
}

func (c *mqlGcpProjectComputeServiceMachineType) GetMemoryMb() *plugin.TValue[int64] {
	return &c.MemoryMb
}

func (c *mqlGcpProjectComputeServiceMachineType) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceMachineType) GetZone() *plugin.TValue[*mqlGcpProjectComputeServiceZone] {
	return &c.Zone
}

// mqlGcpProjectComputeServiceDisk for the gcp.project.computeService.disk resource
type mqlGcpProjectComputeServiceDisk struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceDiskInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Architecture plugin.TValue[string]
	Description plugin.TValue[string]
	GuestOsFeatures plugin.TValue[[]interface{}]
	Labels plugin.TValue[map[string]interface{}]
	LastAttachTimestamp plugin.TValue[*time.Time]
	LastDetachTimestamp plugin.TValue[*time.Time]
	Licenses plugin.TValue[[]interface{}]
	LocationHint plugin.TValue[string]
	PhysicalBlockSizeBytes plugin.TValue[int64]
	ProvisionedIops plugin.TValue[int64]
	SizeGb plugin.TValue[int64]
	Status plugin.TValue[string]
	Zone plugin.TValue[*mqlGcpProjectComputeServiceZone]
	Created plugin.TValue[*time.Time]
	DiskEncryptionKey plugin.TValue[interface{}]
}

// createGcpProjectComputeServiceDisk creates a new instance of this resource
func createGcpProjectComputeServiceDisk(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceDisk{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.disk", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceDisk) MqlName() string {
	return "gcp.project.computeService.disk"
}

func (c *mqlGcpProjectComputeServiceDisk) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceDisk) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceDisk) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceDisk) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceDisk) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceDisk) GetGuestOsFeatures() *plugin.TValue[[]interface{}] {
	return &c.GuestOsFeatures
}

func (c *mqlGcpProjectComputeServiceDisk) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceDisk) GetLastAttachTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastAttachTimestamp
}

func (c *mqlGcpProjectComputeServiceDisk) GetLastDetachTimestamp() *plugin.TValue[*time.Time] {
	return &c.LastDetachTimestamp
}

func (c *mqlGcpProjectComputeServiceDisk) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceDisk) GetLocationHint() *plugin.TValue[string] {
	return &c.LocationHint
}

func (c *mqlGcpProjectComputeServiceDisk) GetPhysicalBlockSizeBytes() *plugin.TValue[int64] {
	return &c.PhysicalBlockSizeBytes
}

func (c *mqlGcpProjectComputeServiceDisk) GetProvisionedIops() *plugin.TValue[int64] {
	return &c.ProvisionedIops
}

func (c *mqlGcpProjectComputeServiceDisk) GetSizeGb() *plugin.TValue[int64] {
	return &c.SizeGb
}

func (c *mqlGcpProjectComputeServiceDisk) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceDisk) GetZone() *plugin.TValue[*mqlGcpProjectComputeServiceZone] {
	return &c.Zone
}

func (c *mqlGcpProjectComputeServiceDisk) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceDisk) GetDiskEncryptionKey() *plugin.TValue[interface{}] {
	return &c.DiskEncryptionKey
}

// mqlGcpProjectComputeServiceSnapshot for the gcp.project.computeService.snapshot resource
type mqlGcpProjectComputeServiceSnapshot struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceSnapshotInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Architecture plugin.TValue[string]
	AutoCreated plugin.TValue[bool]
	ChainName plugin.TValue[string]
	CreationSizeBytes plugin.TValue[int64]
	DiskSizeGb plugin.TValue[int64]
	DownloadBytes plugin.TValue[int64]
	StorageBytes plugin.TValue[int64]
	StorageBytesStatus plugin.TValue[string]
	SnapshotType plugin.TValue[string]
	Licenses plugin.TValue[[]interface{}]
	Labels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Status plugin.TValue[string]
}

// createGcpProjectComputeServiceSnapshot creates a new instance of this resource
func createGcpProjectComputeServiceSnapshot(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceSnapshot{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.snapshot", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceSnapshot) MqlName() string {
	return "gcp.project.computeService.snapshot"
}

func (c *mqlGcpProjectComputeServiceSnapshot) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetAutoCreated() *plugin.TValue[bool] {
	return &c.AutoCreated
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetChainName() *plugin.TValue[string] {
	return &c.ChainName
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetCreationSizeBytes() *plugin.TValue[int64] {
	return &c.CreationSizeBytes
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetDownloadBytes() *plugin.TValue[int64] {
	return &c.DownloadBytes
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetStorageBytes() *plugin.TValue[int64] {
	return &c.StorageBytes
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetStorageBytesStatus() *plugin.TValue[string] {
	return &c.StorageBytesStatus
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetSnapshotType() *plugin.TValue[string] {
	return &c.SnapshotType
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceSnapshot) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

// mqlGcpProjectComputeServiceImage for the gcp.project.computeService.image resource
type mqlGcpProjectComputeServiceImage struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceImageInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Architecture plugin.TValue[string]
	ArchiveSizeBytes plugin.TValue[int64]
	DiskSizeGb plugin.TValue[int64]
	Family plugin.TValue[string]
	Licenses plugin.TValue[[]interface{}]
	Labels plugin.TValue[map[string]interface{}]
	Created plugin.TValue[*time.Time]
	Status plugin.TValue[string]
}

// createGcpProjectComputeServiceImage creates a new instance of this resource
func createGcpProjectComputeServiceImage(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceImage{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.image", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceImage) MqlName() string {
	return "gcp.project.computeService.image"
}

func (c *mqlGcpProjectComputeServiceImage) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceImage) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceImage) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceImage) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceImage) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceImage) GetArchitecture() *plugin.TValue[string] {
	return &c.Architecture
}

func (c *mqlGcpProjectComputeServiceImage) GetArchiveSizeBytes() *plugin.TValue[int64] {
	return &c.ArchiveSizeBytes
}

func (c *mqlGcpProjectComputeServiceImage) GetDiskSizeGb() *plugin.TValue[int64] {
	return &c.DiskSizeGb
}

func (c *mqlGcpProjectComputeServiceImage) GetFamily() *plugin.TValue[string] {
	return &c.Family
}

func (c *mqlGcpProjectComputeServiceImage) GetLicenses() *plugin.TValue[[]interface{}] {
	return &c.Licenses
}

func (c *mqlGcpProjectComputeServiceImage) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceImage) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceImage) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

// mqlGcpProjectComputeServiceFirewall for the gcp.project.computeService.firewall resource
type mqlGcpProjectComputeServiceFirewall struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceFirewallInternal it will be used here
	Id plugin.TValue[string]
	ProjectId plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Priority plugin.TValue[int64]
	Direction plugin.TValue[string]
	Disabled plugin.TValue[bool]
	SourceRanges plugin.TValue[[]interface{}]
	SourceServiceAccounts plugin.TValue[[]interface{}]
	SourceTags plugin.TValue[[]interface{}]
	DestinationRanges plugin.TValue[[]interface{}]
	TargetServiceAccounts plugin.TValue[[]interface{}]
	Created plugin.TValue[*time.Time]
	Allowed plugin.TValue[[]interface{}]
	Denied plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceFirewall creates a new instance of this resource
func createGcpProjectComputeServiceFirewall(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceFirewall{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.firewall", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceFirewall) MqlName() string {
	return "gcp.project.computeService.firewall"
}

func (c *mqlGcpProjectComputeServiceFirewall) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceFirewall) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceFirewall) GetProjectId() *plugin.TValue[string] {
	return &c.ProjectId
}

func (c *mqlGcpProjectComputeServiceFirewall) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceFirewall) GetPriority() *plugin.TValue[int64] {
	return &c.Priority
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDirection() *plugin.TValue[string] {
	return &c.Direction
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDisabled() *plugin.TValue[bool] {
	return &c.Disabled
}

func (c *mqlGcpProjectComputeServiceFirewall) GetSourceRanges() *plugin.TValue[[]interface{}] {
	return &c.SourceRanges
}

func (c *mqlGcpProjectComputeServiceFirewall) GetSourceServiceAccounts() *plugin.TValue[[]interface{}] {
	return &c.SourceServiceAccounts
}

func (c *mqlGcpProjectComputeServiceFirewall) GetSourceTags() *plugin.TValue[[]interface{}] {
	return &c.SourceTags
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDestinationRanges() *plugin.TValue[[]interface{}] {
	return &c.DestinationRanges
}

func (c *mqlGcpProjectComputeServiceFirewall) GetTargetServiceAccounts() *plugin.TValue[[]interface{}] {
	return &c.TargetServiceAccounts
}

func (c *mqlGcpProjectComputeServiceFirewall) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceFirewall) GetAllowed() *plugin.TValue[[]interface{}] {
	return &c.Allowed
}

func (c *mqlGcpProjectComputeServiceFirewall) GetDenied() *plugin.TValue[[]interface{}] {
	return &c.Denied
}

// mqlGcpProjectComputeServiceRouter for the gcp.project.computeService.router resource
type mqlGcpProjectComputeServiceRouter struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceRouterInternal it will be used here
	Id plugin.TValue[string]
	Name plugin.TValue[string]
	Description plugin.TValue[string]
	Bgp plugin.TValue[interface{}]
	BgpPeers plugin.TValue[[]interface{}]
	EncryptedInterconnectRouter plugin.TValue[bool]
	Nats plugin.TValue[[]interface{}]
	Created plugin.TValue[*time.Time]
}

// createGcpProjectComputeServiceRouter creates a new instance of this resource
func createGcpProjectComputeServiceRouter(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceRouter{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.router", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceRouter) MqlName() string {
	return "gcp.project.computeService.router"
}

func (c *mqlGcpProjectComputeServiceRouter) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceRouter) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceRouter) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceRouter) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceRouter) GetBgp() *plugin.TValue[interface{}] {
	return &c.Bgp
}

func (c *mqlGcpProjectComputeServiceRouter) GetBgpPeers() *plugin.TValue[[]interface{}] {
	return &c.BgpPeers
}

func (c *mqlGcpProjectComputeServiceRouter) GetEncryptedInterconnectRouter() *plugin.TValue[bool] {
	return &c.EncryptedInterconnectRouter
}

func (c *mqlGcpProjectComputeServiceRouter) GetNats() *plugin.TValue[[]interface{}] {
	return &c.Nats
}

func (c *mqlGcpProjectComputeServiceRouter) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

// mqlGcpProjectComputeServiceBackendService for the gcp.project.computeService.backendService resource
type mqlGcpProjectComputeServiceBackendService struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceBackendServiceInternal it will be used here
	Id plugin.TValue[string]
	AffinityCookieTtlSec plugin.TValue[int64]
	Backends plugin.TValue[[]interface{}]
	CdnPolicy plugin.TValue[*mqlGcpProjectComputeServiceBackendServiceCdnPolicy]
	CircuitBreakers plugin.TValue[interface{}]
	CompressionMode plugin.TValue[string]
	ConnectionDraining plugin.TValue[interface{}]
	ConnectionTrackingPolicy plugin.TValue[interface{}]
	ConsistentHash plugin.TValue[interface{}]
	Created plugin.TValue[*time.Time]
	CustomRequestHeaders plugin.TValue[[]interface{}]
	CustomResponseHeaders plugin.TValue[[]interface{}]
	Description plugin.TValue[string]
	EdgeSecurityPolicy plugin.TValue[string]
	EnableCDN plugin.TValue[bool]
	FailoverPolicy plugin.TValue[interface{}]
	HealthChecks plugin.TValue[[]interface{}]
	Iap plugin.TValue[interface{}]
	LoadBalancingScheme plugin.TValue[string]
	LocalityLbPolicies plugin.TValue[[]interface{}]
	LocalityLbPolicy plugin.TValue[string]
	LogConfig plugin.TValue[interface{}]
	MaxStreamDuration plugin.TValue[*time.Time]
	Name plugin.TValue[string]
	NetworkUrl plugin.TValue[string]
	PortName plugin.TValue[string]
	Protocol plugin.TValue[string]
	RegionUrl plugin.TValue[string]
	SecurityPolicyUrl plugin.TValue[string]
	SecuritySettings plugin.TValue[interface{}]
	ServiceBindingUrls plugin.TValue[[]interface{}]
	SessionAffinity plugin.TValue[string]
	TimeoutSec plugin.TValue[int64]
}

// createGcpProjectComputeServiceBackendService creates a new instance of this resource
func createGcpProjectComputeServiceBackendService(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceBackendService{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.backendService", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceBackendService) MqlName() string {
	return "gcp.project.computeService.backendService"
}

func (c *mqlGcpProjectComputeServiceBackendService) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceBackendService) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceBackendService) GetAffinityCookieTtlSec() *plugin.TValue[int64] {
	return &c.AffinityCookieTtlSec
}

func (c *mqlGcpProjectComputeServiceBackendService) GetBackends() *plugin.TValue[[]interface{}] {
	return &c.Backends
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCdnPolicy() *plugin.TValue[*mqlGcpProjectComputeServiceBackendServiceCdnPolicy] {
	return &c.CdnPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCircuitBreakers() *plugin.TValue[interface{}] {
	return &c.CircuitBreakers
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCompressionMode() *plugin.TValue[string] {
	return &c.CompressionMode
}

func (c *mqlGcpProjectComputeServiceBackendService) GetConnectionDraining() *plugin.TValue[interface{}] {
	return &c.ConnectionDraining
}

func (c *mqlGcpProjectComputeServiceBackendService) GetConnectionTrackingPolicy() *plugin.TValue[interface{}] {
	return &c.ConnectionTrackingPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetConsistentHash() *plugin.TValue[interface{}] {
	return &c.ConsistentHash
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCustomRequestHeaders() *plugin.TValue[[]interface{}] {
	return &c.CustomRequestHeaders
}

func (c *mqlGcpProjectComputeServiceBackendService) GetCustomResponseHeaders() *plugin.TValue[[]interface{}] {
	return &c.CustomResponseHeaders
}

func (c *mqlGcpProjectComputeServiceBackendService) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceBackendService) GetEdgeSecurityPolicy() *plugin.TValue[string] {
	return &c.EdgeSecurityPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetEnableCDN() *plugin.TValue[bool] {
	return &c.EnableCDN
}

func (c *mqlGcpProjectComputeServiceBackendService) GetFailoverPolicy() *plugin.TValue[interface{}] {
	return &c.FailoverPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetHealthChecks() *plugin.TValue[[]interface{}] {
	return &c.HealthChecks
}

func (c *mqlGcpProjectComputeServiceBackendService) GetIap() *plugin.TValue[interface{}] {
	return &c.Iap
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLoadBalancingScheme() *plugin.TValue[string] {
	return &c.LoadBalancingScheme
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLocalityLbPolicies() *plugin.TValue[[]interface{}] {
	return &c.LocalityLbPolicies
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLocalityLbPolicy() *plugin.TValue[string] {
	return &c.LocalityLbPolicy
}

func (c *mqlGcpProjectComputeServiceBackendService) GetLogConfig() *plugin.TValue[interface{}] {
	return &c.LogConfig
}

func (c *mqlGcpProjectComputeServiceBackendService) GetMaxStreamDuration() *plugin.TValue[*time.Time] {
	return &c.MaxStreamDuration
}

func (c *mqlGcpProjectComputeServiceBackendService) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceBackendService) GetNetworkUrl() *plugin.TValue[string] {
	return &c.NetworkUrl
}

func (c *mqlGcpProjectComputeServiceBackendService) GetPortName() *plugin.TValue[string] {
	return &c.PortName
}

func (c *mqlGcpProjectComputeServiceBackendService) GetProtocol() *plugin.TValue[string] {
	return &c.Protocol
}

func (c *mqlGcpProjectComputeServiceBackendService) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceBackendService) GetSecurityPolicyUrl() *plugin.TValue[string] {
	return &c.SecurityPolicyUrl
}

func (c *mqlGcpProjectComputeServiceBackendService) GetSecuritySettings() *plugin.TValue[interface{}] {
	return &c.SecuritySettings
}

func (c *mqlGcpProjectComputeServiceBackendService) GetServiceBindingUrls() *plugin.TValue[[]interface{}] {
	return &c.ServiceBindingUrls
}

func (c *mqlGcpProjectComputeServiceBackendService) GetSessionAffinity() *plugin.TValue[string] {
	return &c.SessionAffinity
}

func (c *mqlGcpProjectComputeServiceBackendService) GetTimeoutSec() *plugin.TValue[int64] {
	return &c.TimeoutSec
}

// mqlGcpProjectComputeServiceBackendServiceBackend for the gcp.project.computeService.backendService.backend resource
type mqlGcpProjectComputeServiceBackendServiceBackend struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceBackendServiceBackendInternal it will be used here
	Id plugin.TValue[string]
	BalancingMode plugin.TValue[string]
	CapacityScaler plugin.TValue[float64]
	Description plugin.TValue[string]
	Failover plugin.TValue[bool]
	GroupUrl plugin.TValue[string]
	MaxConnections plugin.TValue[int64]
	MaxConnectionsPerEndpoint plugin.TValue[int64]
	MaxConnectionsPerInstance plugin.TValue[int64]
	MaxRate plugin.TValue[int64]
	MaxRatePerEndpoint plugin.TValue[float64]
	MaxRatePerInstance plugin.TValue[float64]
	MaxUtilization plugin.TValue[float64]
}

// createGcpProjectComputeServiceBackendServiceBackend creates a new instance of this resource
func createGcpProjectComputeServiceBackendServiceBackend(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceBackendServiceBackend{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.backendService.backend", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) MqlName() string {
	return "gcp.project.computeService.backendService.backend"
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetBalancingMode() *plugin.TValue[string] {
	return &c.BalancingMode
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetCapacityScaler() *plugin.TValue[float64] {
	return &c.CapacityScaler
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetFailover() *plugin.TValue[bool] {
	return &c.Failover
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetGroupUrl() *plugin.TValue[string] {
	return &c.GroupUrl
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxConnections() *plugin.TValue[int64] {
	return &c.MaxConnections
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxConnectionsPerEndpoint() *plugin.TValue[int64] {
	return &c.MaxConnectionsPerEndpoint
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxConnectionsPerInstance() *plugin.TValue[int64] {
	return &c.MaxConnectionsPerInstance
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxRate() *plugin.TValue[int64] {
	return &c.MaxRate
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxRatePerEndpoint() *plugin.TValue[float64] {
	return &c.MaxRatePerEndpoint
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxRatePerInstance() *plugin.TValue[float64] {
	return &c.MaxRatePerInstance
}

func (c *mqlGcpProjectComputeServiceBackendServiceBackend) GetMaxUtilization() *plugin.TValue[float64] {
	return &c.MaxUtilization
}

// mqlGcpProjectComputeServiceBackendServiceCdnPolicy for the gcp.project.computeService.backendService.cdnPolicy resource
type mqlGcpProjectComputeServiceBackendServiceCdnPolicy struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceBackendServiceCdnPolicyInternal it will be used here
	Id plugin.TValue[string]
	BypassCacheOnRequestHeaders plugin.TValue[[]interface{}]
	CacheKeyPolicy plugin.TValue[interface{}]
	CacheMode plugin.TValue[string]
	ClientTtl plugin.TValue[int64]
	DefaultTtl plugin.TValue[int64]
	MaxTtl plugin.TValue[int64]
	NegativeCaching plugin.TValue[bool]
	NegativeCachingPolicy plugin.TValue[[]interface{}]
	RequestCoalescing plugin.TValue[bool]
	ServeWhileStale plugin.TValue[int64]
	SignedUrlCacheMaxAgeSec plugin.TValue[int64]
	SignedUrlKeyNames plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceBackendServiceCdnPolicy creates a new instance of this resource
func createGcpProjectComputeServiceBackendServiceCdnPolicy(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceBackendServiceCdnPolicy{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.backendService.cdnPolicy", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) MqlName() string {
	return "gcp.project.computeService.backendService.cdnPolicy"
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetBypassCacheOnRequestHeaders() *plugin.TValue[[]interface{}] {
	return &c.BypassCacheOnRequestHeaders
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetCacheKeyPolicy() *plugin.TValue[interface{}] {
	return &c.CacheKeyPolicy
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetCacheMode() *plugin.TValue[string] {
	return &c.CacheMode
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetClientTtl() *plugin.TValue[int64] {
	return &c.ClientTtl
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetDefaultTtl() *plugin.TValue[int64] {
	return &c.DefaultTtl
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetMaxTtl() *plugin.TValue[int64] {
	return &c.MaxTtl
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetNegativeCaching() *plugin.TValue[bool] {
	return &c.NegativeCaching
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetNegativeCachingPolicy() *plugin.TValue[[]interface{}] {
	return &c.NegativeCachingPolicy
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetRequestCoalescing() *plugin.TValue[bool] {
	return &c.RequestCoalescing
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetServeWhileStale() *plugin.TValue[int64] {
	return &c.ServeWhileStale
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetSignedUrlCacheMaxAgeSec() *plugin.TValue[int64] {
	return &c.SignedUrlCacheMaxAgeSec
}

func (c *mqlGcpProjectComputeServiceBackendServiceCdnPolicy) GetSignedUrlKeyNames() *plugin.TValue[[]interface{}] {
	return &c.SignedUrlKeyNames
}

// mqlGcpProjectComputeServiceAddress for the gcp.project.computeService.address resource
type mqlGcpProjectComputeServiceAddress struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceAddressInternal it will be used here
	Id plugin.TValue[string]
	Address plugin.TValue[string]
	AddressType plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Description plugin.TValue[string]
	IpVersion plugin.TValue[string]
	Ipv6EndpointType plugin.TValue[string]
	Name plugin.TValue[string]
	NetworkUrl plugin.TValue[string]
	Network plugin.TValue[*mqlGcpProjectComputeServiceNetwork]
	NetworkTier plugin.TValue[string]
	PrefixLength plugin.TValue[int64]
	Purpose plugin.TValue[string]
	RegionUrl plugin.TValue[string]
	Status plugin.TValue[string]
	SubnetworkUrl plugin.TValue[string]
	Subnetwork plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork]
	ResourceUrls plugin.TValue[[]interface{}]
}

// createGcpProjectComputeServiceAddress creates a new instance of this resource
func createGcpProjectComputeServiceAddress(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceAddress{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.address", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceAddress) MqlName() string {
	return "gcp.project.computeService.address"
}

func (c *mqlGcpProjectComputeServiceAddress) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceAddress) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceAddress) GetAddress() *plugin.TValue[string] {
	return &c.Address
}

func (c *mqlGcpProjectComputeServiceAddress) GetAddressType() *plugin.TValue[string] {
	return &c.AddressType
}

func (c *mqlGcpProjectComputeServiceAddress) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceAddress) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceAddress) GetIpVersion() *plugin.TValue[string] {
	return &c.IpVersion
}

func (c *mqlGcpProjectComputeServiceAddress) GetIpv6EndpointType() *plugin.TValue[string] {
	return &c.Ipv6EndpointType
}

func (c *mqlGcpProjectComputeServiceAddress) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceAddress) GetNetworkUrl() *plugin.TValue[string] {
	return &c.NetworkUrl
}

func (c *mqlGcpProjectComputeServiceAddress) GetNetwork() *plugin.TValue[*mqlGcpProjectComputeServiceNetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceNetwork](&c.Network, func() (*mqlGcpProjectComputeServiceNetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.address", c.__id, "network")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceNetwork), nil
			}
		}

		return c.network()
	})
}

func (c *mqlGcpProjectComputeServiceAddress) GetNetworkTier() *plugin.TValue[string] {
	return &c.NetworkTier
}

func (c *mqlGcpProjectComputeServiceAddress) GetPrefixLength() *plugin.TValue[int64] {
	return &c.PrefixLength
}

func (c *mqlGcpProjectComputeServiceAddress) GetPurpose() *plugin.TValue[string] {
	return &c.Purpose
}

func (c *mqlGcpProjectComputeServiceAddress) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceAddress) GetStatus() *plugin.TValue[string] {
	return &c.Status
}

func (c *mqlGcpProjectComputeServiceAddress) GetSubnetworkUrl() *plugin.TValue[string] {
	return &c.SubnetworkUrl
}

func (c *mqlGcpProjectComputeServiceAddress) GetSubnetwork() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceSubnetwork](&c.Subnetwork, func() (*mqlGcpProjectComputeServiceSubnetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.address", c.__id, "subnetwork")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceSubnetwork), nil
			}
		}

		return c.subnetwork()
	})
}

func (c *mqlGcpProjectComputeServiceAddress) GetResourceUrls() *plugin.TValue[[]interface{}] {
	return &c.ResourceUrls
}

// mqlGcpProjectComputeServiceForwardingRule for the gcp.project.computeService.forwardingRule resource
type mqlGcpProjectComputeServiceForwardingRule struct {
	MqlRuntime *plugin.Runtime
	__id string
	// optional: if you define mqlGcpProjectComputeServiceForwardingRuleInternal it will be used here
	Id plugin.TValue[string]
	IpAddress plugin.TValue[string]
	IpProtocol plugin.TValue[string]
	AllPorts plugin.TValue[bool]
	AllowGlobalAccess plugin.TValue[bool]
	BackendService plugin.TValue[string]
	Created plugin.TValue[*time.Time]
	Description plugin.TValue[string]
	IpVersion plugin.TValue[string]
	IsMirroringCollector plugin.TValue[bool]
	Labels plugin.TValue[map[string]interface{}]
	LoadBalancingScheme plugin.TValue[string]
	MetadataFilters plugin.TValue[[]interface{}]
	Name plugin.TValue[string]
	NetworkUrl plugin.TValue[string]
	Network plugin.TValue[*mqlGcpProjectComputeServiceNetwork]
	NetworkTier plugin.TValue[string]
	NoAutomateDnsZone plugin.TValue[bool]
	PortRange plugin.TValue[string]
	Ports plugin.TValue[[]interface{}]
	RegionUrl plugin.TValue[string]
	ServiceDirectoryRegistrations plugin.TValue[[]interface{}]
	ServiceLabel plugin.TValue[string]
	ServiceName plugin.TValue[string]
	SubnetworkUrl plugin.TValue[string]
	Subnetwork plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork]
	TargetUrl plugin.TValue[string]
}

// createGcpProjectComputeServiceForwardingRule creates a new instance of this resource
func createGcpProjectComputeServiceForwardingRule(runtime *plugin.Runtime, args map[string]*llx.RawData) (plugin.Resource, error) {
	res := &mqlGcpProjectComputeServiceForwardingRule{
		MqlRuntime: runtime,
	}

	err := SetAllData(res, args)
	if err != nil {
		return res, err
	}

	if res.__id == "" {
	res.__id, err = res.id()
		if err != nil {
			return nil, err
		}
	}

	if runtime.HasRecording {
		args, err = runtime.ResourceFromRecording("gcp.project.computeService.forwardingRule", res.__id)
		if err != nil || args == nil {
			return res, err
		}
		return res, SetAllData(res, args)
	}

	return res, nil
}

func (c *mqlGcpProjectComputeServiceForwardingRule) MqlName() string {
	return "gcp.project.computeService.forwardingRule"
}

func (c *mqlGcpProjectComputeServiceForwardingRule) MqlID() string {
	return c.__id
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetId() *plugin.TValue[string] {
	return &c.Id
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIpAddress() *plugin.TValue[string] {
	return &c.IpAddress
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIpProtocol() *plugin.TValue[string] {
	return &c.IpProtocol
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetAllPorts() *plugin.TValue[bool] {
	return &c.AllPorts
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetAllowGlobalAccess() *plugin.TValue[bool] {
	return &c.AllowGlobalAccess
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetBackendService() *plugin.TValue[string] {
	return &c.BackendService
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetCreated() *plugin.TValue[*time.Time] {
	return &c.Created
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetDescription() *plugin.TValue[string] {
	return &c.Description
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIpVersion() *plugin.TValue[string] {
	return &c.IpVersion
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetIsMirroringCollector() *plugin.TValue[bool] {
	return &c.IsMirroringCollector
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetLabels() *plugin.TValue[map[string]interface{}] {
	return &c.Labels
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetLoadBalancingScheme() *plugin.TValue[string] {
	return &c.LoadBalancingScheme
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetMetadataFilters() *plugin.TValue[[]interface{}] {
	return &c.MetadataFilters
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetName() *plugin.TValue[string] {
	return &c.Name
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNetworkUrl() *plugin.TValue[string] {
	return &c.NetworkUrl
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNetwork() *plugin.TValue[*mqlGcpProjectComputeServiceNetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceNetwork](&c.Network, func() (*mqlGcpProjectComputeServiceNetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.forwardingRule", c.__id, "network")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceNetwork), nil
			}
		}

		return c.network()
	})
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNetworkTier() *plugin.TValue[string] {
	return &c.NetworkTier
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetNoAutomateDnsZone() *plugin.TValue[bool] {
	return &c.NoAutomateDnsZone
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetPortRange() *plugin.TValue[string] {
	return &c.PortRange
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetPorts() *plugin.TValue[[]interface{}] {
	return &c.Ports
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetRegionUrl() *plugin.TValue[string] {
	return &c.RegionUrl
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetServiceDirectoryRegistrations() *plugin.TValue[[]interface{}] {
	return &c.ServiceDirectoryRegistrations
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetServiceLabel() *plugin.TValue[string] {
	return &c.ServiceLabel
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetServiceName() *plugin.TValue[string] {
	return &c.ServiceName
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetSubnetworkUrl() *plugin.TValue[string] {
	return &c.SubnetworkUrl
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetSubnetwork() *plugin.TValue[*mqlGcpProjectComputeServiceSubnetwork] {
	return plugin.GetOrCompute[*mqlGcpProjectComputeServiceSubnetwork](&c.Subnetwork, func() (*mqlGcpProjectComputeServiceSubnetwork, error) {
		if c.MqlRuntime.HasRecording {
			d, err := c.MqlRuntime.FieldResourceFromRecording("gcp.project.computeService.forwardingRule", c.__id, "subnetwork")
			if err != nil {
				return nil, err
			}
			if d != nil {
				return d.Value.(*mqlGcpProjectComputeServiceSubnetwork), nil
			}
		}

		return c.subnetwork()
	})
}

func (c *mqlGcpProjectComputeServiceForwardingRule) GetTargetUrl() *plugin.TValue[string] {
	return &c.TargetUrl
}
