// Code generated by resources. DO NOT EDIT.
package resources

import (
	"errors"

	"go.mondoo.com/cnquery/providers/plugin"
	"go.mondoo.com/cnquery/providers/proto"
	"go.mondoo.com/cnquery/types"
)

var newResource = map[string]func(runtime *plugin.Runtime, args map[string]interface{}) (plugin.Resource, error){
	"mondoo": NewMondoo,
}

// CreateResource is used by the runtime of this plugin
func CreateResource(runtime *plugin.Runtime, name string, args map[string]interface{}) (plugin.Resource, error) {
	f, ok := newResource[name]
	if !ok {
		return nil, errors.New("cannot find resource " + name + " in os provider")
	}

	return f(runtime, args)
}

var getDataFields = map[string]func(r plugin.Resource) *proto.DataRes{
	"mondoo.version": func(r plugin.Resource) *proto.DataRes {
		return (r.(*mqlMondoo).GetVersion()).ToDataRes(types.String)
	},
	"mondoo.build": func(r plugin.Resource) *proto.DataRes {
		return (r.(*mqlMondoo).GetBuild()).ToDataRes(types.String)
	},
	"mondoo.arch": func(r plugin.Resource) *proto.DataRes {
		return (r.(*mqlMondoo).GetArch()).ToDataRes(types.String)
	},
	"mondoo.jobEnvironment": func(r plugin.Resource) *proto.DataRes {
		return (r.(*mqlMondoo).GetJobEnvironment()).ToDataRes(types.Dict)
	},
}

func GetData(resource plugin.Resource, field string, args map[string]interface{}) *proto.DataRes {
	f, ok := getDataFields[resource.MqlName()+"."+field]
	if !ok {
		return &proto.DataRes{Error: "cannot find '" + field + "' in resource '" + resource.MqlName() + "'"}
	}

	return f(resource)
}

var setDataFields = map[string]func(r plugin.Resource, v interface{}) bool {
	"mondoo.version": func(r plugin.Resource, v interface{}) bool {
		var ok bool
		r.(*mqlMondoo).Version, ok = plugin.RawToTValue[string](v)
		return ok
	},
	"mondoo.build": func(r plugin.Resource, v interface{}) bool {
		var ok bool
		r.(*mqlMondoo).Build, ok = plugin.RawToTValue[string](v)
		return ok
	},
	"mondoo.arch": func(r plugin.Resource, v interface{}) bool {
		var ok bool
		r.(*mqlMondoo).Arch, ok = plugin.RawToTValue[string](v)
		return ok
	},
	"mondoo.jobEnvironment": func(r plugin.Resource, v interface{}) bool {
		var ok bool
		r.(*mqlMondoo).JobEnvironment, ok = plugin.RawToTValue[interface{}](v)
		return ok
	},
}

func SetData(resource plugin.Resource, field string, val interface{}) error {
	f, ok := setDataFields[resource.MqlName() + "." + field]
	if !ok {
		return errors.New("cannot set '"+field+"' in resource '"+resource.MqlName()+"', field not found")
	}

	if ok := f(resource, val); !ok {
		return errors.New("cannot set '"+field+"' in resource '"+resource.MqlName()+"', type does not match")
	}
	return nil
}

// mqlMondoo for the mondoo resource
type mqlMondoo struct {
	MqlRuntime *plugin.Runtime
	_id string
	// optional: if you define mqlMondooInternal it will be used here

	Version plugin.TValue[string]
	Build plugin.TValue[string]
	Arch plugin.TValue[string]
	JobEnvironment plugin.TValue[interface{}]
}

// NewMondoo creates a new instance of this resource
func NewMondoo(runtime *plugin.Runtime, args map[string]interface{}) (plugin.Resource, error) {
	res := &mqlMondoo{
		MqlRuntime: runtime,
	}

	var err error

	for k, v := range args {
		if err = SetData(res, k, v); err != nil {
			return res, err
		}
	}

	res._id, err = res.id()
	return res, err
}

func (c *mqlMondoo) MqlName() string {
	return "mondoo"
}

func (c *mqlMondoo) MqlID() string {
	return c._id
}

func (c *mqlMondoo) GetVersion() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Version, func() (string, error) {
		return c.version()
	})
}

func (c *mqlMondoo) GetBuild() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Build, func() (string, error) {
		return c.build()
	})
}

func (c *mqlMondoo) GetArch() *plugin.TValue[string] {
	return plugin.GetOrCompute[string](&c.Arch, func() (string, error) {
		return c.arch()
	})
}

func (c *mqlMondoo) GetJobEnvironment() *plugin.TValue[interface{}] {
	return plugin.GetOrCompute[interface{}](&c.JobEnvironment, func() (interface{}, error) {
		return c.jobEnvironment()
	})
}
