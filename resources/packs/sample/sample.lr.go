// Code generated by resources. DO NOT EDIT.
package sample

import (
	"errors"
	"fmt"
	"time"

	"go.mondoo.com/cnquery/resources"
	"github.com/rs/zerolog/log"
)

// Init all resources into the registry
func Init(registry *resources.Registry) {
	registry.AddFactory("sample.project", newSampleProject)
	registry.AddFactory("sample.project.computeService", newSampleProjectComputeService)
	registry.AddFactory("sample.project.computeService.instance", newSampleProjectComputeServiceInstance)
	registry.AddFactory("sample.project.computeService.disk", newSampleProjectComputeServiceDisk)
	registry.AddFactory("sample.project.gkeService", newSampleProjectGkeService)
	registry.AddFactory("sample.project.gkeService.cluster", newSampleProjectGkeServiceCluster)
}

// SampleProject resource interface
type SampleProject interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	Compute() (SampleProjectComputeService, error)
	Gke() (SampleProjectGkeService, error)
}

// mqlSampleProject for the sample.project resource
type mqlSampleProject struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSampleProject) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the sample.project resource
func newSampleProject(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSampleProject{runtime.NewResource("sample.project")}
	var existing SampleProject
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "compute":
			if _, ok := val.(SampleProjectComputeService); !ok {
				return nil, errors.New("Failed to initialize \"sample.project\", its \"compute\" argument has the wrong type (expected type \"SampleProjectComputeService\")")
			}
		case "gke":
			if _, ok := val.(SampleProjectGkeService); !ok {
				return nil, errors.New("Failed to initialize \"sample.project\", its \"gke\" argument has the wrong type (expected type \"SampleProjectGkeService\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"sample.project\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized sample.project with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSampleProject) Validate() error {
	// required arguments
	// no required fields found

	return nil
}

// Register accessor autogenerated
func (s *mqlSampleProject) Register(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project].Register")
	switch name {
	case "id":
		return nil
	case "compute":
		return nil
	case "gke":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSampleProject) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[sample.project].Field")
	switch name {
	case "id":
		return s.Id()
	case "compute":
		return s.Compute()
	case "gke":
		return s.Gke()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"sample.project\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSampleProject) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		if err := s.ComputeId(); err != nil {
			return "", err
		}
		res, ok = s.Cache.Load("id")
		if !ok {
			return "", errors.New("\"sample.project\" calculated \"id\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "id")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSampleProject) Compute() (SampleProjectComputeService, error) {
	res, ok := s.Cache.Load("compute")
	if !ok || !res.Valid {
		if err := s.ComputeCompute(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("compute")
		if !ok {
			return nil, errors.New("\"sample.project\" calculated \"compute\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "compute")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SampleProjectComputeService)
	if !ok {
		return nil, fmt.Errorf("\"sample.project\" failed to cast field \"compute\" to the right type (SampleProjectComputeService): %#v", res)
	}
	return tres, nil
}

// Gke accessor autogenerated
func (s *mqlSampleProject) Gke() (SampleProjectGkeService, error) {
	res, ok := s.Cache.Load("gke")
	if !ok || !res.Valid {
		if err := s.ComputeGke(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("gke")
		if !ok {
			return nil, errors.New("\"sample.project\" calculated \"gke\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "gke")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SampleProjectGkeService)
	if !ok {
		return nil, fmt.Errorf("\"sample.project\" failed to cast field \"gke\" to the right type (SampleProjectGkeService): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSampleProject) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project].MqlCompute")
	switch name {
	case "id":
		return s.ComputeId()
	case "compute":
		return s.ComputeCompute()
	case "gke":
		return s.ComputeGke()
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project\" resource")
	}
}

// ComputeId computer autogenerated
func (s *mqlSampleProject) ComputeId() error {
	var err error
	if _, ok := s.Cache.Load("id"); ok {
		return nil
	}
	vres, err := s.GetId()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("id", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeCompute computer autogenerated
func (s *mqlSampleProject) ComputeCompute() error {
	var err error
	if _, ok := s.Cache.Load("compute"); ok {
		return nil
	}
	vres, err := s.GetCompute()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("compute", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeGke computer autogenerated
func (s *mqlSampleProject) ComputeGke() error {
	var err error
	if _, ok := s.Cache.Load("gke"); ok {
		return nil
	}
	vres, err := s.GetGke()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("gke", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// SampleProjectComputeService resource interface
type SampleProjectComputeService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Instances() ([]interface{}, error)
	Disks() ([]interface{}, error)
}

// mqlSampleProjectComputeService for the sample.project.computeService resource
type mqlSampleProjectComputeService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSampleProjectComputeService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the sample.project.computeService resource
func newSampleProjectComputeService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSampleProjectComputeService{runtime.NewResource("sample.project.computeService")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "instances":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService\", its \"instances\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "disks":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService\", its \"disks\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized sample.project.computeService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSampleProjectComputeService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"sample.project.computeService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSampleProjectComputeService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.computeService].Register")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return nil
	case "disks":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.computeService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSampleProjectComputeService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[sample.project.computeService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "instances":
		return s.Instances()
	case "disks":
		return s.Disks()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"sample.project.computeService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlSampleProjectComputeService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.computeService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.computeService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Instances accessor autogenerated
func (s *mqlSampleProjectComputeService) Instances() ([]interface{}, error) {
	res, ok := s.Cache.Load("instances")
	if !ok || !res.Valid {
		if err := s.ComputeInstances(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("instances")
		if !ok {
			return nil, errors.New("\"sample.project.computeService\" calculated \"instances\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "instances")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"sample.project.computeService\" failed to cast field \"instances\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Disks accessor autogenerated
func (s *mqlSampleProjectComputeService) Disks() ([]interface{}, error) {
	res, ok := s.Cache.Load("disks")
	if !ok || !res.Valid {
		if err := s.ComputeDisks(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("disks")
		if !ok {
			return nil, errors.New("\"sample.project.computeService\" calculated \"disks\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "disks")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"sample.project.computeService\" failed to cast field \"disks\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSampleProjectComputeService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.computeService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "instances":
		return s.ComputeInstances()
	case "disks":
		return s.ComputeDisks()
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.computeService\" resource")
	}
}

// ComputeInstances computer autogenerated
func (s *mqlSampleProjectComputeService) ComputeInstances() error {
	var err error
	if _, ok := s.Cache.Load("instances"); ok {
		return nil
	}
	vres, err := s.GetInstances()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("instances", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// ComputeDisks computer autogenerated
func (s *mqlSampleProjectComputeService) ComputeDisks() error {
	var err error
	if _, ok := s.Cache.Load("disks"); ok {
		return nil
	}
	vres, err := s.GetDisks()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("disks", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// SampleProjectComputeServiceInstance resource interface
type SampleProjectComputeServiceInstance interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
	Disk() (SampleProjectComputeServiceDisk, error)
}

// mqlSampleProjectComputeServiceInstance for the sample.project.computeService.instance resource
type mqlSampleProjectComputeServiceInstance struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSampleProjectComputeServiceInstance) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the sample.project.computeService.instance resource
func newSampleProjectComputeServiceInstance(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSampleProjectComputeServiceInstance{runtime.NewResource("sample.project.computeService.instance")}
	var existing SampleProjectComputeServiceInstance
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.instance\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.instance\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.instance\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "disk":
			if _, ok := val.(SampleProjectComputeServiceDisk); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.instance\", its \"disk\" argument has the wrong type (expected type \"SampleProjectComputeServiceDisk\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.instance\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized sample.project.computeService.instance with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSampleProjectComputeServiceInstance) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"sample.project.computeService.instance\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"sample.project.computeService.instance\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"sample.project.computeService.instance\" resource without a \"name\". This field is required.")
	}
	if _, ok := s.Cache.Load("disk"); !ok {
		return errors.New("Initialized \"sample.project.computeService.instance\" resource without a \"disk\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSampleProjectComputeServiceInstance) Register(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.computeService.instance].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "disk":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.computeService.instance\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSampleProjectComputeServiceInstance) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[sample.project.computeService.instance].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	case "disk":
		return s.Disk()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"sample.project.computeService.instance\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSampleProjectComputeServiceInstance) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.computeService.instance\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.computeService.instance\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlSampleProjectComputeServiceInstance) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.computeService.instance\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.computeService.instance\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlSampleProjectComputeServiceInstance) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.computeService.instance\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.computeService.instance\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Disk accessor autogenerated
func (s *mqlSampleProjectComputeServiceInstance) Disk() (SampleProjectComputeServiceDisk, error) {
	res, ok := s.Cache.Load("disk")
	if !ok || !res.Valid {
		return nil, errors.New("\"sample.project.computeService.instance\" failed: no value provided for static field \"disk\"")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.(SampleProjectComputeServiceDisk)
	if !ok {
		return nil, fmt.Errorf("\"sample.project.computeService.instance\" failed to cast field \"disk\" to the right type (SampleProjectComputeServiceDisk): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSampleProjectComputeServiceInstance) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.computeService.instance].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	case "disk":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.computeService.instance\" resource")
	}
}

// SampleProjectComputeServiceDisk resource interface
type SampleProjectComputeServiceDisk interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
}

// mqlSampleProjectComputeServiceDisk for the sample.project.computeService.disk resource
type mqlSampleProjectComputeServiceDisk struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSampleProjectComputeServiceDisk) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the sample.project.computeService.disk resource
func newSampleProjectComputeServiceDisk(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSampleProjectComputeServiceDisk{runtime.NewResource("sample.project.computeService.disk")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.disk\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.disk\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.disk\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"sample.project.computeService.disk\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized sample.project.computeService.disk with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSampleProjectComputeServiceDisk) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"sample.project.computeService.disk\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"sample.project.computeService.disk\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"sample.project.computeService.disk\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSampleProjectComputeServiceDisk) Register(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.computeService.disk].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.computeService.disk\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSampleProjectComputeServiceDisk) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[sample.project.computeService.disk].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"sample.project.computeService.disk\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSampleProjectComputeServiceDisk) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.computeService.disk\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.computeService.disk\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlSampleProjectComputeServiceDisk) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.computeService.disk\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.computeService.disk\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlSampleProjectComputeServiceDisk) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.computeService.disk\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.computeService.disk\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSampleProjectComputeServiceDisk) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.computeService.disk].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.computeService.disk\" resource")
	}
}

// SampleProjectGkeService resource interface
type SampleProjectGkeService interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	ProjectId() (string, error)
	Clusters() ([]interface{}, error)
}

// mqlSampleProjectGkeService for the sample.project.gkeService resource
type mqlSampleProjectGkeService struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSampleProjectGkeService) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the sample.project.gkeService resource
func newSampleProjectGkeService(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSampleProjectGkeService{runtime.NewResource("sample.project.gkeService")}
	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.gkeService\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "clusters":
			if _, ok := val.([]interface{}); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.gkeService\", its \"clusters\" argument has the wrong type (expected type \"[]interface{}\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"sample.project.gkeService\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized sample.project.gkeService with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSampleProjectGkeService) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"sample.project.gkeService\" resource without a \"projectId\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSampleProjectGkeService) Register(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.gkeService].Register")
	switch name {
	case "projectId":
		return nil
	case "clusters":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.gkeService\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSampleProjectGkeService) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[sample.project.gkeService].Field")
	switch name {
	case "projectId":
		return s.ProjectId()
	case "clusters":
		return s.Clusters()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"sample.project.gkeService\" resource")
	}
}

// ProjectId accessor autogenerated
func (s *mqlSampleProjectGkeService) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.gkeService\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.gkeService\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Clusters accessor autogenerated
func (s *mqlSampleProjectGkeService) Clusters() ([]interface{}, error) {
	res, ok := s.Cache.Load("clusters")
	if !ok || !res.Valid {
		if err := s.ComputeClusters(); err != nil {
			return nil, err
		}
		res, ok = s.Cache.Load("clusters")
		if !ok {
			return nil, errors.New("\"sample.project.gkeService\" calculated \"clusters\" but didn't find its value in cache.")
		}
		s.MotorRuntime.Trigger(s, "clusters")
	}
	if res.Error != nil {
		return nil, res.Error
	}
	tres, ok := res.Data.([]interface{})
	if !ok {
		return nil, fmt.Errorf("\"sample.project.gkeService\" failed to cast field \"clusters\" to the right type ([]interface{}): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSampleProjectGkeService) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.gkeService].MqlCompute")
	switch name {
	case "projectId":
		return nil
	case "clusters":
		return s.ComputeClusters()
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.gkeService\" resource")
	}
}

// ComputeClusters computer autogenerated
func (s *mqlSampleProjectGkeService) ComputeClusters() error {
	var err error
	if _, ok := s.Cache.Load("clusters"); ok {
		return nil
	}
	vres, err := s.GetClusters()
	if _, ok := err.(resources.NotReadyError); ok {
		return err
	}
	s.Cache.Store("clusters", &resources.CacheEntry{Data: vres, Valid: true, Error: err, Timestamp: time.Now().Unix()})
	return nil
}

// SampleProjectGkeServiceCluster resource interface
type SampleProjectGkeServiceCluster interface {
	MqlResource() (*resources.Resource)
	MqlCompute(string) error
	Field(string) (interface{}, error)
	Register(string) error
	Validate() error
	Id() (string, error)
	ProjectId() (string, error)
	Name() (string, error)
}

// mqlSampleProjectGkeServiceCluster for the sample.project.gkeService.cluster resource
type mqlSampleProjectGkeServiceCluster struct {
	*resources.Resource
}

// MqlResource to retrieve the underlying resource info
func (s *mqlSampleProjectGkeServiceCluster) MqlResource() *resources.Resource {
	return s.Resource
}

// create a new instance of the sample.project.gkeService.cluster resource
func newSampleProjectGkeServiceCluster(runtime *resources.Runtime, args *resources.Args) (interface{}, error) {
	// User hooks
	var err error
	res := mqlSampleProjectGkeServiceCluster{runtime.NewResource("sample.project.gkeService.cluster")}
	var existing SampleProjectGkeServiceCluster
	args, existing, err = res.init(args)
	if err != nil {
		return nil, err
	}
	if existing != nil {
		return existing, nil
	}

	// assign all named fields
	var id string

	now := time.Now().Unix()
	for name, val := range *args {
		if val == nil {
			res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
			continue
		}

		switch name {
		case "id":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.gkeService.cluster\", its \"id\" argument has the wrong type (expected type \"string\")")
			}
		case "projectId":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.gkeService.cluster\", its \"projectId\" argument has the wrong type (expected type \"string\")")
			}
		case "name":
			if _, ok := val.(string); !ok {
				return nil, errors.New("Failed to initialize \"sample.project.gkeService.cluster\", its \"name\" argument has the wrong type (expected type \"string\")")
			}
		case "__id":
			idVal, ok := val.(string)
			if !ok {
				return nil, errors.New("Failed to initialize \"sample.project.gkeService.cluster\", its \"__id\" argument has the wrong type (expected type \"string\")")
			}
			id = idVal
		default:
			return nil, errors.New("Initialized sample.project.gkeService.cluster with unknown argument " + name)
		}
		res.Cache.Store(name, &resources.CacheEntry{Data: val, Valid: true, Timestamp: now})
	}

	// Get the ID
	if id == "" {
		res.Resource.Id, err = res.id()
		if err != nil {
			return nil, err
		}
	} else {
		res.Resource.Id = id
	}

	return &res, nil
}

func (s *mqlSampleProjectGkeServiceCluster) Validate() error {
	// required arguments
	if _, ok := s.Cache.Load("id"); !ok {
		return errors.New("Initialized \"sample.project.gkeService.cluster\" resource without a \"id\". This field is required.")
	}
	if _, ok := s.Cache.Load("projectId"); !ok {
		return errors.New("Initialized \"sample.project.gkeService.cluster\" resource without a \"projectId\". This field is required.")
	}
	if _, ok := s.Cache.Load("name"); !ok {
		return errors.New("Initialized \"sample.project.gkeService.cluster\" resource without a \"name\". This field is required.")
	}

	return nil
}

// Register accessor autogenerated
func (s *mqlSampleProjectGkeServiceCluster) Register(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.gkeService.cluster].Register")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.gkeService.cluster\" resource")
	}
}

// Field accessor autogenerated
func (s *mqlSampleProjectGkeServiceCluster) Field(name string) (interface{}, error) {
	log.Trace().Str("field", name).Msg("[sample.project.gkeService.cluster].Field")
	switch name {
	case "id":
		return s.Id()
	case "projectId":
		return s.ProjectId()
	case "name":
		return s.Name()
	default:
		return nil, fmt.Errorf("Cannot find field '" + name + "' in \"sample.project.gkeService.cluster\" resource")
	}
}

// Id accessor autogenerated
func (s *mqlSampleProjectGkeServiceCluster) Id() (string, error) {
	res, ok := s.Cache.Load("id")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.gkeService.cluster\" failed: no value provided for static field \"id\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.gkeService.cluster\" failed to cast field \"id\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// ProjectId accessor autogenerated
func (s *mqlSampleProjectGkeServiceCluster) ProjectId() (string, error) {
	res, ok := s.Cache.Load("projectId")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.gkeService.cluster\" failed: no value provided for static field \"projectId\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.gkeService.cluster\" failed to cast field \"projectId\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Name accessor autogenerated
func (s *mqlSampleProjectGkeServiceCluster) Name() (string, error) {
	res, ok := s.Cache.Load("name")
	if !ok || !res.Valid {
		return "", errors.New("\"sample.project.gkeService.cluster\" failed: no value provided for static field \"name\"")
	}
	if res.Error != nil {
		return "", res.Error
	}
	tres, ok := res.Data.(string)
	if !ok {
		return "", fmt.Errorf("\"sample.project.gkeService.cluster\" failed to cast field \"name\" to the right type (string): %#v", res)
	}
	return tres, nil
}

// Compute accessor autogenerated
func (s *mqlSampleProjectGkeServiceCluster) MqlCompute(name string) error {
	log.Trace().Str("field", name).Msg("[sample.project.gkeService.cluster].MqlCompute")
	switch name {
	case "id":
		return nil
	case "projectId":
		return nil
	case "name":
		return nil
	default:
		return errors.New("Cannot find field '" + name + "' in \"sample.project.gkeService.cluster\" resource")
	}
}

