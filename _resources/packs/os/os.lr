
import "../core/core.lr"

option go_package = "go.mondoo.com/cnquery/resources/packs/os"

alias os.base.command = command
alias os.base.find = files.find
alias os.base.user = core.user
alias os.base.group = core.group
alias os.base.file = core.file
alias os.base.time = core.time
alias os.base.packages = core.packages
alias os.base.platform = core.platform
alias os.base.platform.virtualization = core.platform.virtualization
alias os.base.platform.advisories = core.platform.advisories
alias os.base.service = service
alias os.base.services = services
alias os.unix.sshd = sshd
alias os.unix.ntp = ntp.conf
alias os.unix.rsyslog = rsyslog.conf
alias os.unix.lsblk = lsblk
alias os.unix.mount = mount
alias os.unix.shadow = shadow
alias os.linux.yum = yum

// Container Image
container.image {
  // Fully-qualified reference name
  name string
  // Identifier of type-specific portion of the image reference
  identifier string
  // Identifier Type `tag` or `digest`
  identifierType string
  // Repository used for Container Image
  repository() container.repository
}

// Container registry repository
container.repository {
  // Container Registry Repository Name
  name string
  // URL Scheme
  scheme string
  // Container Registry Repository URL
  fullName string
  // Container Registry URL
  registry string
}

// Equinix Metal project
equinix.metal.project {
  id string
  name string
  organization() equinix.metal.organization
  createdAt time
  updatedAt time
  url string
  paymentMethod dict
  users() []equinix.metal.user
  sshKeys() []equinix.metal.sshkey
  devices() []equinix.metal.device
}

// Equinix Metal organization
equinix.metal.organization {
  id string
  name string
  description string
  website string
  twitter string
  createdAt time
  updatedAt time
  address dict
  taxId string
  mainPhone string
  billingPhone string
  creditAmount float
  url string
}

// Equinix Metal user
equinix.metal.user {
  id string
  firstName string
  lastName string
  fullName string
  email string
  twoFactorAuth string
  avatarUrl string
  twitter string
  facebook string
  linkedin string
  createdAt time
  updatedAt time
  timezone string
  phoneNumber string
  url string
  vpn bool
}

// Equinix Metal SSH key
equinix.metal.sshkey {
  id string
  label string
  key string
  fingerPrint string
  createdAt time
  updatedAt time
  url string
}

// Equinix Metal device
equinix.metal.device {
  id string
  shortID string
  url string
  hostname string
  description string
  state string
  createdAt time
  updatedAt time
  locked bool
  billingCycle string
  spotInstance bool
  os dict
}

// macOS specific resources
macos {
  // macOS user defaults
  userPreferences() map[string]dict
  // macOS user defaults for current host
  userHostPreferences() map[string]dict
  // macOS global account policies
  globalAccountPolicies() dict
}

// macOS application layer firewall (ALF) service
macos.alf {
  // Allow downloaded software to receive incoming connections
  allowDownloadSignedEnabled int
  // Allow built-in software to receive incoming connections for signed software
  allowSignedEnabled int
  // Flag if firewall is unloaded
  firewallUnload int
  // Indicates if the firewall is enabled
  globalState int
  // Specifies if alf.log is used
  loggingEnabled int
  // Specifies logging flags
  loggingOption int
  // Stealth mode
  stealthEnabled int
  // ALF version
  version string
  // Service exceptions
  exceptions []dict
  // Services explicitly allowed to perform networking
  explicitAuths []string
  // Applications with exceptions for network blocking
  applications []dict
}

// macOS machine settings
// The resource requires at least "admin" privileges to run
macos.systemsetup {
  // Current date
  date() string
  // Current time in 24-hour format
  time() string
  // Current time zone
  timeZone() string
  // Whether network time is on or off
  usingNetworkTime() string
  // Configured network time server
  networkTimeServer() string
  // Amount of idle time until machine sleeps
  sleep() []string
  // Amount of idle time until display sleeps
  displaySleep() string
  // Amount of idle time until hard disk sleeps
  harddiskSleep() string
  // Whether wake on modem is on or off
  wakeOnModem() string
  // Whether wake on network access is on or off
  wakeOnNetworkAccess() string
  // Whether restart on power failure is on or off
  restartPowerFailure() string
  // Whether restart on freeze is on or off
  restartFreeze() string
  // Whether the power button can sleep the computer
  allowPowerButtonToSleepComputer() string
  // Whether remote login (SSH) is on or off
  remoteLogin() string
  // Whether remote apple events are on or off
  remoteAppleEvents() string
  // Computer name
  computerName() string
  // Local subnet name
  localSubnetName() string
  // Current startup disk
  startupDisk() string
  // Number of seconds after which the computer will start up after a power failure
  waitForStartupAfterPowerFailure() string
  // Whether or not the keyboard should be disabled when the X Serve enclosure lock is engaged
  disableKeyboardWhenEnclosureLockIsEngaged() string
}

// macOS Time Machine
macos.timemachine {
  // macOS Time Machine preferences
  preferences() dict
}

// macOS keychains and security framework
macos.security {
  // Deprecated: Authorization policy database
  authorizationDB() dict
}

